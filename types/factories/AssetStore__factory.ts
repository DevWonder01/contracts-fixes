/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { AssetStore } from "../AssetStore";

export class AssetStore__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(rs: string, overrides?: Overrides): Promise<AssetStore> {
    return super.deploy(rs, overrides || {}) as Promise<AssetStore>;
  }
  getDeployTransaction(rs: string, overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(rs, overrides || {});
  }
  attach(address: string): AssetStore {
    return super.attach(address) as AssetStore;
  }
  connect(signer: Signer): AssetStore__factory {
    return super.connect(signer) as AssetStore__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AssetStore {
    return new Contract(address, _abi, signerOrProvider) as AssetStore;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract RoleStore",
        name: "rs",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "prevGov",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "nextGov",
        type: "address",
      },
    ],
    name: "SetGov",
    type: "event",
  },
  {
    inputs: [],
    name: "CONTRACT",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ORACLE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "assetList",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
    ],
    name: "get",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "minSize",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "chainlinkFeed",
            type: "address",
          },
        ],
        internalType: "struct AssetStore.Asset",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getAssetByIndex",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAssetCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAssetList",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gov",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
    ],
    name: "isSupported",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "roleStore",
    outputs: [
      {
        internalType: "contract RoleStore",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "minSize",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "chainlinkFeed",
            type: "address",
          },
        ],
        internalType: "struct AssetStore.Asset",
        name: "assetInfo",
        type: "tuple",
      },
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_gov",
        type: "address",
      },
    ],
    name: "setGov",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60803461006757601f610bd738819003918201601f19168301916001600160401b0383118484101761006c5780849260209460405283398101031261006757516001600160a01b03811681036100675761005890610082565b604051610afc90816100db8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b60005460018060a01b03199133838316176000557f53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f7856040805160018060a01b038095168152336020820152a11690600154161760015556fe60806040526004361015610013575b600080fd5b60003560e01c80630fe0ff411461010357806312d43a51146100fa57806313a09fdf146100f15780633765c0b8146100e857806338013f02146100df5780634a4a7b04146100d65780634f129c53146100cd578063a0aead4d146100c4578063a0b4b301146100bb578063c2bc2efc146100b2578063cfad57a2146100a95763fc833ac6146100a157600080fd5b61000e61084a565b5061000e610791565b5061000e6106f2565b5061000e61066c565b5061000e6105ba565b5061000e610552565b5061000e6104ff565b5061000e6104a5565b5061000e6103a7565b5061000e610288565b5061000e610196565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff600435600254811015610189575b60026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace015416604051908152f35b6101916105f7565b610158565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60005416604051908152f35b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361000e57565b6044359073ffffffffffffffffffffffffffffffffffffffff8216820361000e57565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761027b57604052565b61028361022f565b604052565b503461000e5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576102c06101e9565b60407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc36011261000e5761034790604051906040820182811067ffffffffffffffff821117610349575b604052602435825261031a61020c565b602083015261034273ffffffffffffffffffffffffffffffffffffffff6000541633146108a4565b6109af565b005b61035161022f565b61030a565b6020908160408183019282815285518094520193019160005b82811061037d575050505090565b835173ffffffffffffffffffffffffffffffffffffffff168552938101939281019260010161036f565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57604051806002549182815260208091019260026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace916000905b82821061047857848603601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168501806104678767ffffffffffffffff83118184101761046b575b8260405282610356565b0390f35b61047361022f565b61045d565b835473ffffffffffffffffffffffffffffffffffffffff1686529485019460019384019390910190610413565b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760206040517f352d05fe3946dbe49277552ba941e744d5a96d9c60bc1ba0ea5f1d3ae000f7c88152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57602073ffffffffffffffffffffffffffffffffffffffff60015416604051908152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5773ffffffffffffffffffffffffffffffffffffffff61059f6101e9565b16600052600360205260206040600020541515604051908152f35b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e576020600254604051908152f35b507f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60025481101561065f575b60026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b6106676105f7565b610632565b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760043560025481101561000e5773ffffffffffffffffffffffffffffffffffffffff60209160026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace015416604051908152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e57604061072c6101e9565b60006020835161073b8161025f565b828152015273ffffffffffffffffffffffffffffffffffffffff8091166000526003602052816000209082516107708161025f565b60208260018554958685520154169101908152835192835251166020820152f35b503461000e5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e577f53351836099c03ffc3b1727d8abd4b0222afa87d4ed76ae3102d51369ef7f78560406107ec6101e9565b7fffffffffffffffffffffffff000000000000000000000000000000000000000060005473ffffffffffffffffffffffffffffffffffffffff808216936108348533146108a4565b16918291161760005582519182526020820152a1005b503461000e5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261000e5760206040517fa66b7a3e6b19d24ccb6f717fc232a1bb0278a7f83f8e2211835fc4ed0fe69f198152f35b156108ab57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600460248201527f21676f76000000000000000000000000000000000000000000000000000000006044820152fd5b73ffffffffffffffffffffffffffffffffffffffff600254680100000000000000008110156109a2575b6001810180600255811015610995575b60026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0191167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b61099d6105f7565b610943565b6109aa61022f565b610933565b9073ffffffffffffffffffffffffffffffffffffffff80831660009080825260036020526040822093805185558360206001809701920151167fffffffffffffffffffffffff00000000000000000000000000000000000000008254161790558192600254935b848110610a2e57505050505050610a2c90610909565b565b8282610a5c610a3c84610627565b905473ffffffffffffffffffffffffffffffffffffffff9160031b1c1690565b1614610abd577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610a90578501610a16565b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b5050505050505056fea264697066735822122060ad41378d6b70d3a2c5e4fd95ac2e5451c100d324f17a5b7b28c2acb4f1d85364736f6c634300080d0033";
