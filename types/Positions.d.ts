/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PositionsInterface extends ethers.utils.Interface {
  functions: {
    "BPS_DIVIDER()": FunctionFragment;
    "CONTRACT()": FunctionFragment;
    "DS()": FunctionFragment;
    "ORACLE()": FunctionFragment;
    "UNIT()": FunctionFragment;
    "addMargin(address,string,uint256)": FunctionFragment;
    "assetStore()": FunctionFragment;
    "chainlink()": FunctionFragment;
    "creditFee(uint256,address,address,string,uint256,uint256,bool)": FunctionFragment;
    "decreasePosition(uint256,uint256)": FunctionFragment;
    "flushPosition(address,address,string)": FunctionFragment;
    "fundStore()": FunctionFragment;
    "funding()": FunctionFragment;
    "fundingStore()": FunctionFragment;
    "getPnL(address,string,bool,uint256,uint256,uint256,int256)": FunctionFragment;
    "gov()": FunctionFragment;
    "increasePosition(uint256,uint256)": FunctionFragment;
    "link()": FunctionFragment;
    "marketStore()": FunctionFragment;
    "orderStore()": FunctionFragment;
    "pool()": FunctionFragment;
    "poolStore()": FunctionFragment;
    "positionStore()": FunctionFragment;
    "rebateStore()": FunctionFragment;
    "referralStore()": FunctionFragment;
    "removeMargin(address,string,uint256)": FunctionFragment;
    "riskStore()": FunctionFragment;
    "roleStore()": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "stakingStore()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BPS_DIVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CONTRACT", values?: undefined): string;
  encodeFunctionData(functionFragment: "DS", values?: undefined): string;
  encodeFunctionData(functionFragment: "ORACLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "UNIT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addMargin",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetStore",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "chainlink", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "creditFee",
    values: [
      BigNumberish,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePosition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flushPosition",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "fundStore", values?: undefined): string;
  encodeFunctionData(functionFragment: "funding", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundingStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPnL",
    values: [
      string,
      string,
      boolean,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increasePosition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "link", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "marketStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orderStore",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positionStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebateStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeMargin",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "riskStore", values?: undefined): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakingStore",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "BPS_DIVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CONTRACT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ORACLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "UNIT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addMargin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assetStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chainlink", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "creditFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flushPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "funding", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundingStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPnL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increasePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "link", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positionStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebateStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "riskStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingStore",
    data: BytesLike
  ): Result;

  events: {
    "FeePaid(uint256,address,address,string,uint256,uint256,uint256,uint256,uint256,uint256,bool)": EventFragment;
    "MarginDecreased(address,address,string,uint256,uint256)": EventFragment;
    "MarginIncreased(address,address,string,uint256,uint256)": EventFragment;
    "PositionDecreased(uint256,address,address,string,bool,uint256,uint256,uint256,uint256,uint256,uint256,int256,uint256,int256,int256)": EventFragment;
    "PositionIncreased(uint256,address,address,string,bool,uint256,uint256,uint256,uint256,uint256,uint256,int256,uint256)": EventFragment;
    "ReferrerPaid(address,address,uint256,address,uint256)": EventFragment;
    "SetGov(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarginDecreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarginIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionDecreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferrerPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGov"): EventFragment;
}

export class Positions extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PositionsInterface;

  functions: {
    BPS_DIVIDER(overrides?: CallOverrides): Promise<[BigNumber]>;

    "BPS_DIVIDER()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<[string]>;

    DS(overrides?: CallOverrides): Promise<[string]>;

    "DS()"(overrides?: CallOverrides): Promise<[string]>;

    ORACLE(overrides?: CallOverrides): Promise<[string]>;

    "ORACLE()"(overrides?: CallOverrides): Promise<[string]>;

    UNIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "UNIT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addMargin(
      asset: string,
      market: string,
      margin: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addMargin(address,string,uint256)"(
      asset: string,
      market: string,
      margin: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    assetStore(overrides?: CallOverrides): Promise<[string]>;

    "assetStore()"(overrides?: CallOverrides): Promise<[string]>;

    chainlink(overrides?: CallOverrides): Promise<[string]>;

    "chainlink()"(overrides?: CallOverrides): Promise<[string]>;

    creditFee(
      orderId: BigNumberish,
      user: string,
      asset: string,
      market: string,
      fee: BigNumberish,
      originalFee: BigNumberish,
      isLiquidation: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "creditFee(uint256,address,address,string,uint256,uint256,bool)"(
      orderId: BigNumberish,
      user: string,
      asset: string,
      market: string,
      fee: BigNumberish,
      originalFee: BigNumberish,
      isLiquidation: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decreasePosition(
      orderId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreasePosition(uint256,uint256)"(
      orderId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    flushPosition(
      user: string,
      asset: string,
      market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "flushPosition(address,address,string)"(
      user: string,
      asset: string,
      market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    fundStore(overrides?: CallOverrides): Promise<[string]>;

    "fundStore()"(overrides?: CallOverrides): Promise<[string]>;

    funding(overrides?: CallOverrides): Promise<[string]>;

    "funding()"(overrides?: CallOverrides): Promise<[string]>;

    fundingStore(overrides?: CallOverrides): Promise<[string]>;

    "fundingStore()"(overrides?: CallOverrides): Promise<[string]>;

    getPnL(
      asset: string,
      market: string,
      isLong: boolean,
      price: BigNumberish,
      positionPrice: BigNumberish,
      size: BigNumberish,
      fundingTracker: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { pnl: BigNumber; fundingFee: BigNumber }
    >;

    "getPnL(address,string,bool,uint256,uint256,uint256,int256)"(
      asset: string,
      market: string,
      isLong: boolean,
      price: BigNumberish,
      positionPrice: BigNumberish,
      size: BigNumberish,
      fundingTracker: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { pnl: BigNumber; fundingFee: BigNumber }
    >;

    gov(overrides?: CallOverrides): Promise<[string]>;

    "gov()"(overrides?: CallOverrides): Promise<[string]>;

    increasePosition(
      orderId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increasePosition(uint256,uint256)"(
      orderId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    link(overrides?: Overrides): Promise<ContractTransaction>;

    "link()"(overrides?: Overrides): Promise<ContractTransaction>;

    marketStore(overrides?: CallOverrides): Promise<[string]>;

    "marketStore()"(overrides?: CallOverrides): Promise<[string]>;

    orderStore(overrides?: CallOverrides): Promise<[string]>;

    "orderStore()"(overrides?: CallOverrides): Promise<[string]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    "pool()"(overrides?: CallOverrides): Promise<[string]>;

    poolStore(overrides?: CallOverrides): Promise<[string]>;

    "poolStore()"(overrides?: CallOverrides): Promise<[string]>;

    positionStore(overrides?: CallOverrides): Promise<[string]>;

    "positionStore()"(overrides?: CallOverrides): Promise<[string]>;

    rebateStore(overrides?: CallOverrides): Promise<[string]>;

    "rebateStore()"(overrides?: CallOverrides): Promise<[string]>;

    referralStore(overrides?: CallOverrides): Promise<[string]>;

    "referralStore()"(overrides?: CallOverrides): Promise<[string]>;

    removeMargin(
      asset: string,
      market: string,
      margin: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeMargin(address,string,uint256)"(
      asset: string,
      market: string,
      margin: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    riskStore(overrides?: CallOverrides): Promise<[string]>;

    "riskStore()"(overrides?: CallOverrides): Promise<[string]>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;

    "roleStore()"(overrides?: CallOverrides): Promise<[string]>;

    setGov(_gov: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setGov(address)"(
      _gov: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakingStore(overrides?: CallOverrides): Promise<[string]>;

    "stakingStore()"(overrides?: CallOverrides): Promise<[string]>;
  };

  BPS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

  "BPS_DIVIDER()"(overrides?: CallOverrides): Promise<BigNumber>;

  CONTRACT(overrides?: CallOverrides): Promise<string>;

  "CONTRACT()"(overrides?: CallOverrides): Promise<string>;

  DS(overrides?: CallOverrides): Promise<string>;

  "DS()"(overrides?: CallOverrides): Promise<string>;

  ORACLE(overrides?: CallOverrides): Promise<string>;

  "ORACLE()"(overrides?: CallOverrides): Promise<string>;

  UNIT(overrides?: CallOverrides): Promise<BigNumber>;

  "UNIT()"(overrides?: CallOverrides): Promise<BigNumber>;

  addMargin(
    asset: string,
    market: string,
    margin: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addMargin(address,string,uint256)"(
    asset: string,
    market: string,
    margin: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  assetStore(overrides?: CallOverrides): Promise<string>;

  "assetStore()"(overrides?: CallOverrides): Promise<string>;

  chainlink(overrides?: CallOverrides): Promise<string>;

  "chainlink()"(overrides?: CallOverrides): Promise<string>;

  creditFee(
    orderId: BigNumberish,
    user: string,
    asset: string,
    market: string,
    fee: BigNumberish,
    originalFee: BigNumberish,
    isLiquidation: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "creditFee(uint256,address,address,string,uint256,uint256,bool)"(
    orderId: BigNumberish,
    user: string,
    asset: string,
    market: string,
    fee: BigNumberish,
    originalFee: BigNumberish,
    isLiquidation: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decreasePosition(
    orderId: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreasePosition(uint256,uint256)"(
    orderId: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  flushPosition(
    user: string,
    asset: string,
    market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "flushPosition(address,address,string)"(
    user: string,
    asset: string,
    market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  fundStore(overrides?: CallOverrides): Promise<string>;

  "fundStore()"(overrides?: CallOverrides): Promise<string>;

  funding(overrides?: CallOverrides): Promise<string>;

  "funding()"(overrides?: CallOverrides): Promise<string>;

  fundingStore(overrides?: CallOverrides): Promise<string>;

  "fundingStore()"(overrides?: CallOverrides): Promise<string>;

  getPnL(
    asset: string,
    market: string,
    isLong: boolean,
    price: BigNumberish,
    positionPrice: BigNumberish,
    size: BigNumberish,
    fundingTracker: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { pnl: BigNumber; fundingFee: BigNumber }
  >;

  "getPnL(address,string,bool,uint256,uint256,uint256,int256)"(
    asset: string,
    market: string,
    isLong: boolean,
    price: BigNumberish,
    positionPrice: BigNumberish,
    size: BigNumberish,
    fundingTracker: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { pnl: BigNumber; fundingFee: BigNumber }
  >;

  gov(overrides?: CallOverrides): Promise<string>;

  "gov()"(overrides?: CallOverrides): Promise<string>;

  increasePosition(
    orderId: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increasePosition(uint256,uint256)"(
    orderId: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  link(overrides?: Overrides): Promise<ContractTransaction>;

  "link()"(overrides?: Overrides): Promise<ContractTransaction>;

  marketStore(overrides?: CallOverrides): Promise<string>;

  "marketStore()"(overrides?: CallOverrides): Promise<string>;

  orderStore(overrides?: CallOverrides): Promise<string>;

  "orderStore()"(overrides?: CallOverrides): Promise<string>;

  pool(overrides?: CallOverrides): Promise<string>;

  "pool()"(overrides?: CallOverrides): Promise<string>;

  poolStore(overrides?: CallOverrides): Promise<string>;

  "poolStore()"(overrides?: CallOverrides): Promise<string>;

  positionStore(overrides?: CallOverrides): Promise<string>;

  "positionStore()"(overrides?: CallOverrides): Promise<string>;

  rebateStore(overrides?: CallOverrides): Promise<string>;

  "rebateStore()"(overrides?: CallOverrides): Promise<string>;

  referralStore(overrides?: CallOverrides): Promise<string>;

  "referralStore()"(overrides?: CallOverrides): Promise<string>;

  removeMargin(
    asset: string,
    market: string,
    margin: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeMargin(address,string,uint256)"(
    asset: string,
    market: string,
    margin: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  riskStore(overrides?: CallOverrides): Promise<string>;

  "riskStore()"(overrides?: CallOverrides): Promise<string>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  "roleStore()"(overrides?: CallOverrides): Promise<string>;

  setGov(_gov: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setGov(address)"(
    _gov: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakingStore(overrides?: CallOverrides): Promise<string>;

  "stakingStore()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    BPS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    "BPS_DIVIDER()"(overrides?: CallOverrides): Promise<BigNumber>;

    CONTRACT(overrides?: CallOverrides): Promise<string>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<string>;

    DS(overrides?: CallOverrides): Promise<string>;

    "DS()"(overrides?: CallOverrides): Promise<string>;

    ORACLE(overrides?: CallOverrides): Promise<string>;

    "ORACLE()"(overrides?: CallOverrides): Promise<string>;

    UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    "UNIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    addMargin(
      asset: string,
      market: string,
      margin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addMargin(address,string,uint256)"(
      asset: string,
      market: string,
      margin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    assetStore(overrides?: CallOverrides): Promise<string>;

    "assetStore()"(overrides?: CallOverrides): Promise<string>;

    chainlink(overrides?: CallOverrides): Promise<string>;

    "chainlink()"(overrides?: CallOverrides): Promise<string>;

    creditFee(
      orderId: BigNumberish,
      user: string,
      asset: string,
      market: string,
      fee: BigNumberish,
      originalFee: BigNumberish,
      isLiquidation: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "creditFee(uint256,address,address,string,uint256,uint256,bool)"(
      orderId: BigNumberish,
      user: string,
      asset: string,
      market: string,
      fee: BigNumberish,
      originalFee: BigNumberish,
      isLiquidation: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    decreasePosition(
      orderId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "decreasePosition(uint256,uint256)"(
      orderId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    flushPosition(
      user: string,
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "flushPosition(address,address,string)"(
      user: string,
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<void>;

    fundStore(overrides?: CallOverrides): Promise<string>;

    "fundStore()"(overrides?: CallOverrides): Promise<string>;

    funding(overrides?: CallOverrides): Promise<string>;

    "funding()"(overrides?: CallOverrides): Promise<string>;

    fundingStore(overrides?: CallOverrides): Promise<string>;

    "fundingStore()"(overrides?: CallOverrides): Promise<string>;

    getPnL(
      asset: string,
      market: string,
      isLong: boolean,
      price: BigNumberish,
      positionPrice: BigNumberish,
      size: BigNumberish,
      fundingTracker: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { pnl: BigNumber; fundingFee: BigNumber }
    >;

    "getPnL(address,string,bool,uint256,uint256,uint256,int256)"(
      asset: string,
      market: string,
      isLong: boolean,
      price: BigNumberish,
      positionPrice: BigNumberish,
      size: BigNumberish,
      fundingTracker: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { pnl: BigNumber; fundingFee: BigNumber }
    >;

    gov(overrides?: CallOverrides): Promise<string>;

    "gov()"(overrides?: CallOverrides): Promise<string>;

    increasePosition(
      orderId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "increasePosition(uint256,uint256)"(
      orderId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    link(overrides?: CallOverrides): Promise<void>;

    "link()"(overrides?: CallOverrides): Promise<void>;

    marketStore(overrides?: CallOverrides): Promise<string>;

    "marketStore()"(overrides?: CallOverrides): Promise<string>;

    orderStore(overrides?: CallOverrides): Promise<string>;

    "orderStore()"(overrides?: CallOverrides): Promise<string>;

    pool(overrides?: CallOverrides): Promise<string>;

    "pool()"(overrides?: CallOverrides): Promise<string>;

    poolStore(overrides?: CallOverrides): Promise<string>;

    "poolStore()"(overrides?: CallOverrides): Promise<string>;

    positionStore(overrides?: CallOverrides): Promise<string>;

    "positionStore()"(overrides?: CallOverrides): Promise<string>;

    rebateStore(overrides?: CallOverrides): Promise<string>;

    "rebateStore()"(overrides?: CallOverrides): Promise<string>;

    referralStore(overrides?: CallOverrides): Promise<string>;

    "referralStore()"(overrides?: CallOverrides): Promise<string>;

    removeMargin(
      asset: string,
      market: string,
      margin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeMargin(address,string,uint256)"(
      asset: string,
      market: string,
      margin: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    riskStore(overrides?: CallOverrides): Promise<string>;

    "riskStore()"(overrides?: CallOverrides): Promise<string>;

    roleStore(overrides?: CallOverrides): Promise<string>;

    "roleStore()"(overrides?: CallOverrides): Promise<string>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    "setGov(address)"(_gov: string, overrides?: CallOverrides): Promise<void>;

    stakingStore(overrides?: CallOverrides): Promise<string>;

    "stakingStore()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    FeePaid(
      orderId: BigNumberish | null,
      user: string | null,
      asset: string | null,
      market: null,
      fee: null,
      originalFee: null,
      poolFee: null,
      stakingFee: null,
      referrerFee: null,
      oracleFee: null,
      isLiquidation: null
    ): EventFilter;

    MarginDecreased(
      user: string | null,
      asset: string | null,
      market: null,
      marginDiff: null,
      positionMargin: null
    ): EventFilter;

    MarginIncreased(
      user: string | null,
      asset: string | null,
      market: null,
      marginDiff: null,
      positionMargin: null
    ): EventFilter;

    PositionDecreased(
      orderId: BigNumberish | null,
      user: string | null,
      asset: string | null,
      market: null,
      isLong: null,
      size: null,
      margin: null,
      price: null,
      positionMargin: null,
      positionSize: null,
      positionPrice: null,
      fundingTracker: null,
      fee: null,
      pnl: null,
      fundingFee: null
    ): EventFilter;

    PositionIncreased(
      orderId: BigNumberish | null,
      user: string | null,
      asset: string | null,
      market: null,
      isLong: null,
      size: null,
      margin: null,
      price: null,
      positionMargin: null,
      positionSize: null,
      positionPrice: null,
      fundingTracker: null,
      fee: null
    ): EventFilter;

    ReferrerPaid(
      referrer: string | null,
      asset: string | null,
      referrerFee: null,
      referrerUser: null,
      referrerShareBps: null
    ): EventFilter;

    SetGov(prevGov: null, nextGov: null): EventFilter;
  };

  estimateGas: {
    BPS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    "BPS_DIVIDER()"(overrides?: CallOverrides): Promise<BigNumber>;

    CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<BigNumber>;

    DS(overrides?: CallOverrides): Promise<BigNumber>;

    "DS()"(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ORACLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    "UNIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    addMargin(
      asset: string,
      market: string,
      margin: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addMargin(address,string,uint256)"(
      asset: string,
      market: string,
      margin: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    assetStore(overrides?: CallOverrides): Promise<BigNumber>;

    "assetStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    chainlink(overrides?: CallOverrides): Promise<BigNumber>;

    "chainlink()"(overrides?: CallOverrides): Promise<BigNumber>;

    creditFee(
      orderId: BigNumberish,
      user: string,
      asset: string,
      market: string,
      fee: BigNumberish,
      originalFee: BigNumberish,
      isLiquidation: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "creditFee(uint256,address,address,string,uint256,uint256,bool)"(
      orderId: BigNumberish,
      user: string,
      asset: string,
      market: string,
      fee: BigNumberish,
      originalFee: BigNumberish,
      isLiquidation: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decreasePosition(
      orderId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreasePosition(uint256,uint256)"(
      orderId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    flushPosition(
      user: string,
      asset: string,
      market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "flushPosition(address,address,string)"(
      user: string,
      asset: string,
      market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    fundStore(overrides?: CallOverrides): Promise<BigNumber>;

    "fundStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    funding(overrides?: CallOverrides): Promise<BigNumber>;

    "funding()"(overrides?: CallOverrides): Promise<BigNumber>;

    fundingStore(overrides?: CallOverrides): Promise<BigNumber>;

    "fundingStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPnL(
      asset: string,
      market: string,
      isLong: boolean,
      price: BigNumberish,
      positionPrice: BigNumberish,
      size: BigNumberish,
      fundingTracker: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPnL(address,string,bool,uint256,uint256,uint256,int256)"(
      asset: string,
      market: string,
      isLong: boolean,
      price: BigNumberish,
      positionPrice: BigNumberish,
      size: BigNumberish,
      fundingTracker: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    "gov()"(overrides?: CallOverrides): Promise<BigNumber>;

    increasePosition(
      orderId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increasePosition(uint256,uint256)"(
      orderId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    link(overrides?: Overrides): Promise<BigNumber>;

    "link()"(overrides?: Overrides): Promise<BigNumber>;

    marketStore(overrides?: CallOverrides): Promise<BigNumber>;

    "marketStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    orderStore(overrides?: CallOverrides): Promise<BigNumber>;

    "orderStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    "pool()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolStore(overrides?: CallOverrides): Promise<BigNumber>;

    "poolStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    positionStore(overrides?: CallOverrides): Promise<BigNumber>;

    "positionStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    rebateStore(overrides?: CallOverrides): Promise<BigNumber>;

    "rebateStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    referralStore(overrides?: CallOverrides): Promise<BigNumber>;

    "referralStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeMargin(
      asset: string,
      market: string,
      margin: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeMargin(address,string,uint256)"(
      asset: string,
      market: string,
      margin: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    riskStore(overrides?: CallOverrides): Promise<BigNumber>;

    "riskStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;

    "roleStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    setGov(_gov: string, overrides?: Overrides): Promise<BigNumber>;

    "setGov(address)"(_gov: string, overrides?: Overrides): Promise<BigNumber>;

    stakingStore(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingStore()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BPS_DIVIDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BPS_DIVIDER()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ORACLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "UNIT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addMargin(
      asset: string,
      market: string,
      margin: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addMargin(address,string,uint256)"(
      asset: string,
      market: string,
      margin: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    assetStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assetStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainlink(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "chainlink()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creditFee(
      orderId: BigNumberish,
      user: string,
      asset: string,
      market: string,
      fee: BigNumberish,
      originalFee: BigNumberish,
      isLiquidation: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "creditFee(uint256,address,address,string,uint256,uint256,bool)"(
      orderId: BigNumberish,
      user: string,
      asset: string,
      market: string,
      fee: BigNumberish,
      originalFee: BigNumberish,
      isLiquidation: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decreasePosition(
      orderId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreasePosition(uint256,uint256)"(
      orderId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    flushPosition(
      user: string,
      asset: string,
      market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "flushPosition(address,address,string)"(
      user: string,
      asset: string,
      market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    fundStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fundStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    funding(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "funding()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundingStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fundingStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPnL(
      asset: string,
      market: string,
      isLong: boolean,
      price: BigNumberish,
      positionPrice: BigNumberish,
      size: BigNumberish,
      fundingTracker: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPnL(address,string,bool,uint256,uint256,uint256,int256)"(
      asset: string,
      market: string,
      isLong: boolean,
      price: BigNumberish,
      positionPrice: BigNumberish,
      size: BigNumberish,
      fundingTracker: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gov()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increasePosition(
      orderId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increasePosition(uint256,uint256)"(
      orderId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    link(overrides?: Overrides): Promise<PopulatedTransaction>;

    "link()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    marketStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "marketStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "orderStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positionStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "positionStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebateStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rebateStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referralStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "referralStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeMargin(
      asset: string,
      market: string,
      margin: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeMargin(address,string,uint256)"(
      asset: string,
      market: string,
      margin: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    riskStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "riskStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "roleStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGov(_gov: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "setGov(address)"(
      _gov: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakingStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
