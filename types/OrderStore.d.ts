/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OrderStoreInterface extends ethers.utils.Interface {
  functions: {
    "CONTRACT()": FunctionFragment;
    "ORACLE()": FunctionFragment;
    "add(tuple)": FunctionFragment;
    "areNewOrdersPaused()": FunctionFragment;
    "chainlinkCooldown()": FunctionFragment;
    "get(uint256)": FunctionFragment;
    "getMany(uint256[])": FunctionFragment;
    "getMarketOrderCount()": FunctionFragment;
    "getMarketOrders(uint256)": FunctionFragment;
    "getTriggerOrderCount()": FunctionFragment;
    "getTriggerOrders(uint256,uint256)": FunctionFragment;
    "getUserOrderCount(address)": FunctionFragment;
    "getUserOrders(address)": FunctionFragment;
    "gov()": FunctionFragment;
    "isProcessingPaused()": FunctionFragment;
    "isUserOrder(uint256,address)": FunctionFragment;
    "maxMarketOrderTTL()": FunctionFragment;
    "maxTriggerOrderTTL()": FunctionFragment;
    "minOracleBalance()": FunctionFragment;
    "oid()": FunctionFragment;
    "remove(uint256)": FunctionFragment;
    "roleStore()": FunctionFragment;
    "setAreNewOrdersPaused(bool)": FunctionFragment;
    "setChainlinkCooldown(uint256)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setIsProcessingPaused(bool)": FunctionFragment;
    "setMaxMarketOrderTTL(uint256)": FunctionFragment;
    "setMaxTriggerOrderTTL(uint256)": FunctionFragment;
    "setMinOracleBalance(uint256)": FunctionFragment;
    "updateCancelOrderId(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "CONTRACT", values?: undefined): string;
  encodeFunctionData(functionFragment: "ORACLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [
      {
        orderId: BigNumberish;
        user: string;
        asset: string;
        market: string;
        margin: BigNumberish;
        size: BigNumberish;
        price: BigNumberish;
        fee: BigNumberish;
        isLong: boolean;
        orderType: BigNumberish;
        isReduceOnly: boolean;
        timestamp: BigNumberish;
        expiry: BigNumberish;
        cancelOrderId: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "areNewOrdersPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainlinkCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "get", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getMany",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketOrderCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketOrders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTriggerOrderCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTriggerOrders",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserOrderCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserOrders",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isProcessingPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isUserOrder",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxMarketOrderTTL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTriggerOrderTTL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minOracleBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAreNewOrdersPaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainlinkCooldown",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setIsProcessingPaused",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxMarketOrderTTL",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTriggerOrderTTL",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinOracleBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCancelOrderId",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "CONTRACT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ORACLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "areNewOrdersPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainlinkCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMany", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketOrderCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTriggerOrderCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTriggerOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserOrderCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isProcessingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxMarketOrderTTL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTriggerOrderTTL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minOracleBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAreNewOrdersPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainlinkCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIsProcessingPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxMarketOrderTTL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTriggerOrderTTL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinOracleBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCancelOrderId",
    data: BytesLike
  ): Result;

  events: {
    "SetGov(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetGov"): EventFragment;
}

export class OrderStore extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OrderStoreInterface;

  functions: {
    CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<[string]>;

    ORACLE(overrides?: CallOverrides): Promise<[string]>;

    "ORACLE()"(overrides?: CallOverrides): Promise<[string]>;

    add(
      order: {
        orderId: BigNumberish;
        user: string;
        asset: string;
        market: string;
        margin: BigNumberish;
        size: BigNumberish;
        price: BigNumberish;
        fee: BigNumberish;
        isLong: boolean;
        orderType: BigNumberish;
        isReduceOnly: boolean;
        timestamp: BigNumberish;
        expiry: BigNumberish;
        cancelOrderId: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "add((uint256,address,address,string,uint256,uint256,uint256,uint256,bool,uint8,bool,uint256,uint256,uint256))"(
      order: {
        orderId: BigNumberish;
        user: string;
        asset: string;
        market: string;
        margin: BigNumberish;
        size: BigNumberish;
        price: BigNumberish;
        fee: BigNumberish;
        isLong: boolean;
        orderType: BigNumberish;
        isReduceOnly: boolean;
        timestamp: BigNumberish;
        expiry: BigNumberish;
        cancelOrderId: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    areNewOrdersPaused(overrides?: CallOverrides): Promise<[boolean]>;

    "areNewOrdersPaused()"(overrides?: CallOverrides): Promise<[boolean]>;

    chainlinkCooldown(overrides?: CallOverrides): Promise<[BigNumber]>;

    "chainlinkCooldown()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    get(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          number,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          orderId: BigNumber;
          user: string;
          asset: string;
          market: string;
          margin: BigNumber;
          size: BigNumber;
          price: BigNumber;
          fee: BigNumber;
          isLong: boolean;
          orderType: number;
          isReduceOnly: boolean;
          timestamp: BigNumber;
          expiry: BigNumber;
          cancelOrderId: BigNumber;
        }
      ]
    >;

    "get(uint256)"(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          number,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          orderId: BigNumber;
          user: string;
          asset: string;
          market: string;
          margin: BigNumber;
          size: BigNumber;
          price: BigNumber;
          fee: BigNumber;
          isLong: boolean;
          orderType: number;
          isReduceOnly: boolean;
          timestamp: BigNumber;
          expiry: BigNumber;
          cancelOrderId: BigNumber;
        }
      ]
    >;

    getMany(
      orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          number,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          orderId: BigNumber;
          user: string;
          asset: string;
          market: string;
          margin: BigNumber;
          size: BigNumber;
          price: BigNumber;
          fee: BigNumber;
          isLong: boolean;
          orderType: number;
          isReduceOnly: boolean;
          timestamp: BigNumber;
          expiry: BigNumber;
          cancelOrderId: BigNumber;
        })[]
      ] & {
        _orders: ([
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          number,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          orderId: BigNumber;
          user: string;
          asset: string;
          market: string;
          margin: BigNumber;
          size: BigNumber;
          price: BigNumber;
          fee: BigNumber;
          isLong: boolean;
          orderType: number;
          isReduceOnly: boolean;
          timestamp: BigNumber;
          expiry: BigNumber;
          cancelOrderId: BigNumber;
        })[];
      }
    >;

    "getMany(uint256[])"(
      orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          number,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          orderId: BigNumber;
          user: string;
          asset: string;
          market: string;
          margin: BigNumber;
          size: BigNumber;
          price: BigNumber;
          fee: BigNumber;
          isLong: boolean;
          orderType: number;
          isReduceOnly: boolean;
          timestamp: BigNumber;
          expiry: BigNumber;
          cancelOrderId: BigNumber;
        })[]
      ] & {
        _orders: ([
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          number,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          orderId: BigNumber;
          user: string;
          asset: string;
          market: string;
          margin: BigNumber;
          size: BigNumber;
          price: BigNumber;
          fee: BigNumber;
          isLong: boolean;
          orderType: number;
          isReduceOnly: boolean;
          timestamp: BigNumber;
          expiry: BigNumber;
          cancelOrderId: BigNumber;
        })[];
      }
    >;

    getMarketOrderCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getMarketOrderCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMarketOrders(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          number,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          orderId: BigNumber;
          user: string;
          asset: string;
          market: string;
          margin: BigNumber;
          size: BigNumber;
          price: BigNumber;
          fee: BigNumber;
          isLong: boolean;
          orderType: number;
          isReduceOnly: boolean;
          timestamp: BigNumber;
          expiry: BigNumber;
          cancelOrderId: BigNumber;
        })[]
      ] & {
        _orders: ([
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          number,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          orderId: BigNumber;
          user: string;
          asset: string;
          market: string;
          margin: BigNumber;
          size: BigNumber;
          price: BigNumber;
          fee: BigNumber;
          isLong: boolean;
          orderType: number;
          isReduceOnly: boolean;
          timestamp: BigNumber;
          expiry: BigNumber;
          cancelOrderId: BigNumber;
        })[];
      }
    >;

    "getMarketOrders(uint256)"(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          number,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          orderId: BigNumber;
          user: string;
          asset: string;
          market: string;
          margin: BigNumber;
          size: BigNumber;
          price: BigNumber;
          fee: BigNumber;
          isLong: boolean;
          orderType: number;
          isReduceOnly: boolean;
          timestamp: BigNumber;
          expiry: BigNumber;
          cancelOrderId: BigNumber;
        })[]
      ] & {
        _orders: ([
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          number,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          orderId: BigNumber;
          user: string;
          asset: string;
          market: string;
          margin: BigNumber;
          size: BigNumber;
          price: BigNumber;
          fee: BigNumber;
          isLong: boolean;
          orderType: number;
          isReduceOnly: boolean;
          timestamp: BigNumber;
          expiry: BigNumber;
          cancelOrderId: BigNumber;
        })[];
      }
    >;

    getTriggerOrderCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTriggerOrderCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTriggerOrders(
      length: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          number,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          orderId: BigNumber;
          user: string;
          asset: string;
          market: string;
          margin: BigNumber;
          size: BigNumber;
          price: BigNumber;
          fee: BigNumber;
          isLong: boolean;
          orderType: number;
          isReduceOnly: boolean;
          timestamp: BigNumber;
          expiry: BigNumber;
          cancelOrderId: BigNumber;
        })[]
      ] & {
        _orders: ([
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          number,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          orderId: BigNumber;
          user: string;
          asset: string;
          market: string;
          margin: BigNumber;
          size: BigNumber;
          price: BigNumber;
          fee: BigNumber;
          isLong: boolean;
          orderType: number;
          isReduceOnly: boolean;
          timestamp: BigNumber;
          expiry: BigNumber;
          cancelOrderId: BigNumber;
        })[];
      }
    >;

    "getTriggerOrders(uint256,uint256)"(
      length: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          number,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          orderId: BigNumber;
          user: string;
          asset: string;
          market: string;
          margin: BigNumber;
          size: BigNumber;
          price: BigNumber;
          fee: BigNumber;
          isLong: boolean;
          orderType: number;
          isReduceOnly: boolean;
          timestamp: BigNumber;
          expiry: BigNumber;
          cancelOrderId: BigNumber;
        })[]
      ] & {
        _orders: ([
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          number,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          orderId: BigNumber;
          user: string;
          asset: string;
          market: string;
          margin: BigNumber;
          size: BigNumber;
          price: BigNumber;
          fee: BigNumber;
          isLong: boolean;
          orderType: number;
          isReduceOnly: boolean;
          timestamp: BigNumber;
          expiry: BigNumber;
          cancelOrderId: BigNumber;
        })[];
      }
    >;

    getUserOrderCount(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getUserOrderCount(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserOrders(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          number,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          orderId: BigNumber;
          user: string;
          asset: string;
          market: string;
          margin: BigNumber;
          size: BigNumber;
          price: BigNumber;
          fee: BigNumber;
          isLong: boolean;
          orderType: number;
          isReduceOnly: boolean;
          timestamp: BigNumber;
          expiry: BigNumber;
          cancelOrderId: BigNumber;
        })[]
      ] & {
        _orders: ([
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          number,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          orderId: BigNumber;
          user: string;
          asset: string;
          market: string;
          margin: BigNumber;
          size: BigNumber;
          price: BigNumber;
          fee: BigNumber;
          isLong: boolean;
          orderType: number;
          isReduceOnly: boolean;
          timestamp: BigNumber;
          expiry: BigNumber;
          cancelOrderId: BigNumber;
        })[];
      }
    >;

    "getUserOrders(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          number,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          orderId: BigNumber;
          user: string;
          asset: string;
          market: string;
          margin: BigNumber;
          size: BigNumber;
          price: BigNumber;
          fee: BigNumber;
          isLong: boolean;
          orderType: number;
          isReduceOnly: boolean;
          timestamp: BigNumber;
          expiry: BigNumber;
          cancelOrderId: BigNumber;
        })[]
      ] & {
        _orders: ([
          BigNumber,
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          number,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          orderId: BigNumber;
          user: string;
          asset: string;
          market: string;
          margin: BigNumber;
          size: BigNumber;
          price: BigNumber;
          fee: BigNumber;
          isLong: boolean;
          orderType: number;
          isReduceOnly: boolean;
          timestamp: BigNumber;
          expiry: BigNumber;
          cancelOrderId: BigNumber;
        })[];
      }
    >;

    gov(overrides?: CallOverrides): Promise<[string]>;

    "gov()"(overrides?: CallOverrides): Promise<[string]>;

    isProcessingPaused(overrides?: CallOverrides): Promise<[boolean]>;

    "isProcessingPaused()"(overrides?: CallOverrides): Promise<[boolean]>;

    isUserOrder(
      orderId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isUserOrder(uint256,address)"(
      orderId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxMarketOrderTTL(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxMarketOrderTTL()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTriggerOrderTTL(overrides?: CallOverrides): Promise<[BigNumber]>;

    "maxTriggerOrderTTL()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    minOracleBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minOracleBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    oid(overrides?: CallOverrides): Promise<[BigNumber]>;

    "oid()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    remove(
      orderId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "remove(uint256)"(
      orderId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;

    "roleStore()"(overrides?: CallOverrides): Promise<[string]>;

    setAreNewOrdersPaused(
      b: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAreNewOrdersPaused(bool)"(
      b: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setChainlinkCooldown(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setChainlinkCooldown(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGov(_gov: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setGov(address)"(
      _gov: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setIsProcessingPaused(
      b: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setIsProcessingPaused(bool)"(
      b: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxMarketOrderTTL(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxMarketOrderTTL(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaxTriggerOrderTTL(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaxTriggerOrderTTL(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinOracleBalance(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinOracleBalance(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateCancelOrderId(
      orderId: BigNumberish,
      cancelOrderId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateCancelOrderId(uint256,uint256)"(
      orderId: BigNumberish,
      cancelOrderId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  CONTRACT(overrides?: CallOverrides): Promise<string>;

  "CONTRACT()"(overrides?: CallOverrides): Promise<string>;

  ORACLE(overrides?: CallOverrides): Promise<string>;

  "ORACLE()"(overrides?: CallOverrides): Promise<string>;

  add(
    order: {
      orderId: BigNumberish;
      user: string;
      asset: string;
      market: string;
      margin: BigNumberish;
      size: BigNumberish;
      price: BigNumberish;
      fee: BigNumberish;
      isLong: boolean;
      orderType: BigNumberish;
      isReduceOnly: boolean;
      timestamp: BigNumberish;
      expiry: BigNumberish;
      cancelOrderId: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "add((uint256,address,address,string,uint256,uint256,uint256,uint256,bool,uint8,bool,uint256,uint256,uint256))"(
    order: {
      orderId: BigNumberish;
      user: string;
      asset: string;
      market: string;
      margin: BigNumberish;
      size: BigNumberish;
      price: BigNumberish;
      fee: BigNumberish;
      isLong: boolean;
      orderType: BigNumberish;
      isReduceOnly: boolean;
      timestamp: BigNumberish;
      expiry: BigNumberish;
      cancelOrderId: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  areNewOrdersPaused(overrides?: CallOverrides): Promise<boolean>;

  "areNewOrdersPaused()"(overrides?: CallOverrides): Promise<boolean>;

  chainlinkCooldown(overrides?: CallOverrides): Promise<BigNumber>;

  "chainlinkCooldown()"(overrides?: CallOverrides): Promise<BigNumber>;

  get(
    orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      number,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      orderId: BigNumber;
      user: string;
      asset: string;
      market: string;
      margin: BigNumber;
      size: BigNumber;
      price: BigNumber;
      fee: BigNumber;
      isLong: boolean;
      orderType: number;
      isReduceOnly: boolean;
      timestamp: BigNumber;
      expiry: BigNumber;
      cancelOrderId: BigNumber;
    }
  >;

  "get(uint256)"(
    orderId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      number,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      orderId: BigNumber;
      user: string;
      asset: string;
      market: string;
      margin: BigNumber;
      size: BigNumber;
      price: BigNumber;
      fee: BigNumber;
      isLong: boolean;
      orderType: number;
      isReduceOnly: boolean;
      timestamp: BigNumber;
      expiry: BigNumber;
      cancelOrderId: BigNumber;
    }
  >;

  getMany(
    orderIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      number,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      orderId: BigNumber;
      user: string;
      asset: string;
      market: string;
      margin: BigNumber;
      size: BigNumber;
      price: BigNumber;
      fee: BigNumber;
      isLong: boolean;
      orderType: number;
      isReduceOnly: boolean;
      timestamp: BigNumber;
      expiry: BigNumber;
      cancelOrderId: BigNumber;
    })[]
  >;

  "getMany(uint256[])"(
    orderIds: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      number,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      orderId: BigNumber;
      user: string;
      asset: string;
      market: string;
      margin: BigNumber;
      size: BigNumber;
      price: BigNumber;
      fee: BigNumber;
      isLong: boolean;
      orderType: number;
      isReduceOnly: boolean;
      timestamp: BigNumber;
      expiry: BigNumber;
      cancelOrderId: BigNumber;
    })[]
  >;

  getMarketOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getMarketOrderCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMarketOrders(
    length: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      number,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      orderId: BigNumber;
      user: string;
      asset: string;
      market: string;
      margin: BigNumber;
      size: BigNumber;
      price: BigNumber;
      fee: BigNumber;
      isLong: boolean;
      orderType: number;
      isReduceOnly: boolean;
      timestamp: BigNumber;
      expiry: BigNumber;
      cancelOrderId: BigNumber;
    })[]
  >;

  "getMarketOrders(uint256)"(
    length: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      number,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      orderId: BigNumber;
      user: string;
      asset: string;
      market: string;
      margin: BigNumber;
      size: BigNumber;
      price: BigNumber;
      fee: BigNumber;
      isLong: boolean;
      orderType: number;
      isReduceOnly: boolean;
      timestamp: BigNumber;
      expiry: BigNumber;
      cancelOrderId: BigNumber;
    })[]
  >;

  getTriggerOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getTriggerOrderCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTriggerOrders(
    length: BigNumberish,
    offset: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      number,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      orderId: BigNumber;
      user: string;
      asset: string;
      market: string;
      margin: BigNumber;
      size: BigNumber;
      price: BigNumber;
      fee: BigNumber;
      isLong: boolean;
      orderType: number;
      isReduceOnly: boolean;
      timestamp: BigNumber;
      expiry: BigNumber;
      cancelOrderId: BigNumber;
    })[]
  >;

  "getTriggerOrders(uint256,uint256)"(
    length: BigNumberish,
    offset: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      number,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      orderId: BigNumber;
      user: string;
      asset: string;
      market: string;
      margin: BigNumber;
      size: BigNumber;
      price: BigNumber;
      fee: BigNumber;
      isLong: boolean;
      orderType: number;
      isReduceOnly: boolean;
      timestamp: BigNumber;
      expiry: BigNumber;
      cancelOrderId: BigNumber;
    })[]
  >;

  getUserOrderCount(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUserOrderCount(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserOrders(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      number,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      orderId: BigNumber;
      user: string;
      asset: string;
      market: string;
      margin: BigNumber;
      size: BigNumber;
      price: BigNumber;
      fee: BigNumber;
      isLong: boolean;
      orderType: number;
      isReduceOnly: boolean;
      timestamp: BigNumber;
      expiry: BigNumber;
      cancelOrderId: BigNumber;
    })[]
  >;

  "getUserOrders(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      BigNumber,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      number,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      orderId: BigNumber;
      user: string;
      asset: string;
      market: string;
      margin: BigNumber;
      size: BigNumber;
      price: BigNumber;
      fee: BigNumber;
      isLong: boolean;
      orderType: number;
      isReduceOnly: boolean;
      timestamp: BigNumber;
      expiry: BigNumber;
      cancelOrderId: BigNumber;
    })[]
  >;

  gov(overrides?: CallOverrides): Promise<string>;

  "gov()"(overrides?: CallOverrides): Promise<string>;

  isProcessingPaused(overrides?: CallOverrides): Promise<boolean>;

  "isProcessingPaused()"(overrides?: CallOverrides): Promise<boolean>;

  isUserOrder(
    orderId: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isUserOrder(uint256,address)"(
    orderId: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxMarketOrderTTL(overrides?: CallOverrides): Promise<BigNumber>;

  "maxMarketOrderTTL()"(overrides?: CallOverrides): Promise<BigNumber>;

  maxTriggerOrderTTL(overrides?: CallOverrides): Promise<BigNumber>;

  "maxTriggerOrderTTL()"(overrides?: CallOverrides): Promise<BigNumber>;

  minOracleBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "minOracleBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  oid(overrides?: CallOverrides): Promise<BigNumber>;

  "oid()"(overrides?: CallOverrides): Promise<BigNumber>;

  remove(
    orderId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "remove(uint256)"(
    orderId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  "roleStore()"(overrides?: CallOverrides): Promise<string>;

  setAreNewOrdersPaused(
    b: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAreNewOrdersPaused(bool)"(
    b: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setChainlinkCooldown(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setChainlinkCooldown(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGov(_gov: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setGov(address)"(
    _gov: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setIsProcessingPaused(
    b: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setIsProcessingPaused(bool)"(
    b: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxMarketOrderTTL(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxMarketOrderTTL(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaxTriggerOrderTTL(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaxTriggerOrderTTL(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinOracleBalance(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinOracleBalance(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateCancelOrderId(
    orderId: BigNumberish,
    cancelOrderId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateCancelOrderId(uint256,uint256)"(
    orderId: BigNumberish,
    cancelOrderId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    CONTRACT(overrides?: CallOverrides): Promise<string>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<string>;

    ORACLE(overrides?: CallOverrides): Promise<string>;

    "ORACLE()"(overrides?: CallOverrides): Promise<string>;

    add(
      order: {
        orderId: BigNumberish;
        user: string;
        asset: string;
        market: string;
        margin: BigNumberish;
        size: BigNumberish;
        price: BigNumberish;
        fee: BigNumberish;
        isLong: boolean;
        orderType: BigNumberish;
        isReduceOnly: boolean;
        timestamp: BigNumberish;
        expiry: BigNumberish;
        cancelOrderId: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "add((uint256,address,address,string,uint256,uint256,uint256,uint256,bool,uint8,bool,uint256,uint256,uint256))"(
      order: {
        orderId: BigNumberish;
        user: string;
        asset: string;
        market: string;
        margin: BigNumberish;
        size: BigNumberish;
        price: BigNumberish;
        fee: BigNumberish;
        isLong: boolean;
        orderType: BigNumberish;
        isReduceOnly: boolean;
        timestamp: BigNumberish;
        expiry: BigNumberish;
        cancelOrderId: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    areNewOrdersPaused(overrides?: CallOverrides): Promise<boolean>;

    "areNewOrdersPaused()"(overrides?: CallOverrides): Promise<boolean>;

    chainlinkCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    "chainlinkCooldown()"(overrides?: CallOverrides): Promise<BigNumber>;

    get(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        number,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        orderId: BigNumber;
        user: string;
        asset: string;
        market: string;
        margin: BigNumber;
        size: BigNumber;
        price: BigNumber;
        fee: BigNumber;
        isLong: boolean;
        orderType: number;
        isReduceOnly: boolean;
        timestamp: BigNumber;
        expiry: BigNumber;
        cancelOrderId: BigNumber;
      }
    >;

    "get(uint256)"(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        number,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        orderId: BigNumber;
        user: string;
        asset: string;
        market: string;
        margin: BigNumber;
        size: BigNumber;
        price: BigNumber;
        fee: BigNumber;
        isLong: boolean;
        orderType: number;
        isReduceOnly: boolean;
        timestamp: BigNumber;
        expiry: BigNumber;
        cancelOrderId: BigNumber;
      }
    >;

    getMany(
      orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        number,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        orderId: BigNumber;
        user: string;
        asset: string;
        market: string;
        margin: BigNumber;
        size: BigNumber;
        price: BigNumber;
        fee: BigNumber;
        isLong: boolean;
        orderType: number;
        isReduceOnly: boolean;
        timestamp: BigNumber;
        expiry: BigNumber;
        cancelOrderId: BigNumber;
      })[]
    >;

    "getMany(uint256[])"(
      orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        number,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        orderId: BigNumber;
        user: string;
        asset: string;
        market: string;
        margin: BigNumber;
        size: BigNumber;
        price: BigNumber;
        fee: BigNumber;
        isLong: boolean;
        orderType: number;
        isReduceOnly: boolean;
        timestamp: BigNumber;
        expiry: BigNumber;
        cancelOrderId: BigNumber;
      })[]
    >;

    getMarketOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getMarketOrderCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketOrders(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        number,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        orderId: BigNumber;
        user: string;
        asset: string;
        market: string;
        margin: BigNumber;
        size: BigNumber;
        price: BigNumber;
        fee: BigNumber;
        isLong: boolean;
        orderType: number;
        isReduceOnly: boolean;
        timestamp: BigNumber;
        expiry: BigNumber;
        cancelOrderId: BigNumber;
      })[]
    >;

    "getMarketOrders(uint256)"(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        number,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        orderId: BigNumber;
        user: string;
        asset: string;
        market: string;
        margin: BigNumber;
        size: BigNumber;
        price: BigNumber;
        fee: BigNumber;
        isLong: boolean;
        orderType: number;
        isReduceOnly: boolean;
        timestamp: BigNumber;
        expiry: BigNumber;
        cancelOrderId: BigNumber;
      })[]
    >;

    getTriggerOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getTriggerOrderCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTriggerOrders(
      length: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        number,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        orderId: BigNumber;
        user: string;
        asset: string;
        market: string;
        margin: BigNumber;
        size: BigNumber;
        price: BigNumber;
        fee: BigNumber;
        isLong: boolean;
        orderType: number;
        isReduceOnly: boolean;
        timestamp: BigNumber;
        expiry: BigNumber;
        cancelOrderId: BigNumber;
      })[]
    >;

    "getTriggerOrders(uint256,uint256)"(
      length: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        number,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        orderId: BigNumber;
        user: string;
        asset: string;
        market: string;
        margin: BigNumber;
        size: BigNumber;
        price: BigNumber;
        fee: BigNumber;
        isLong: boolean;
        orderType: number;
        isReduceOnly: boolean;
        timestamp: BigNumber;
        expiry: BigNumber;
        cancelOrderId: BigNumber;
      })[]
    >;

    getUserOrderCount(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserOrderCount(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserOrders(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        number,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        orderId: BigNumber;
        user: string;
        asset: string;
        market: string;
        margin: BigNumber;
        size: BigNumber;
        price: BigNumber;
        fee: BigNumber;
        isLong: boolean;
        orderType: number;
        isReduceOnly: boolean;
        timestamp: BigNumber;
        expiry: BigNumber;
        cancelOrderId: BigNumber;
      })[]
    >;

    "getUserOrders(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        BigNumber,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        number,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        orderId: BigNumber;
        user: string;
        asset: string;
        market: string;
        margin: BigNumber;
        size: BigNumber;
        price: BigNumber;
        fee: BigNumber;
        isLong: boolean;
        orderType: number;
        isReduceOnly: boolean;
        timestamp: BigNumber;
        expiry: BigNumber;
        cancelOrderId: BigNumber;
      })[]
    >;

    gov(overrides?: CallOverrides): Promise<string>;

    "gov()"(overrides?: CallOverrides): Promise<string>;

    isProcessingPaused(overrides?: CallOverrides): Promise<boolean>;

    "isProcessingPaused()"(overrides?: CallOverrides): Promise<boolean>;

    isUserOrder(
      orderId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isUserOrder(uint256,address)"(
      orderId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxMarketOrderTTL(overrides?: CallOverrides): Promise<BigNumber>;

    "maxMarketOrderTTL()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxTriggerOrderTTL(overrides?: CallOverrides): Promise<BigNumber>;

    "maxTriggerOrderTTL()"(overrides?: CallOverrides): Promise<BigNumber>;

    minOracleBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "minOracleBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    oid(overrides?: CallOverrides): Promise<BigNumber>;

    "oid()"(overrides?: CallOverrides): Promise<BigNumber>;

    remove(orderId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "remove(uint256)"(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    roleStore(overrides?: CallOverrides): Promise<string>;

    "roleStore()"(overrides?: CallOverrides): Promise<string>;

    setAreNewOrdersPaused(b: boolean, overrides?: CallOverrides): Promise<void>;

    "setAreNewOrdersPaused(bool)"(
      b: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setChainlinkCooldown(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setChainlinkCooldown(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    "setGov(address)"(_gov: string, overrides?: CallOverrides): Promise<void>;

    setIsProcessingPaused(b: boolean, overrides?: CallOverrides): Promise<void>;

    "setIsProcessingPaused(bool)"(
      b: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxMarketOrderTTL(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxMarketOrderTTL(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTriggerOrderTTL(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaxTriggerOrderTTL(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinOracleBalance(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinOracleBalance(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCancelOrderId(
      orderId: BigNumberish,
      cancelOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateCancelOrderId(uint256,uint256)"(
      orderId: BigNumberish,
      cancelOrderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    SetGov(prevGov: null, nextGov: null): EventFilter;
  };

  estimateGas: {
    CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ORACLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    add(
      order: {
        orderId: BigNumberish;
        user: string;
        asset: string;
        market: string;
        margin: BigNumberish;
        size: BigNumberish;
        price: BigNumberish;
        fee: BigNumberish;
        isLong: boolean;
        orderType: BigNumberish;
        isReduceOnly: boolean;
        timestamp: BigNumberish;
        expiry: BigNumberish;
        cancelOrderId: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "add((uint256,address,address,string,uint256,uint256,uint256,uint256,bool,uint8,bool,uint256,uint256,uint256))"(
      order: {
        orderId: BigNumberish;
        user: string;
        asset: string;
        market: string;
        margin: BigNumberish;
        size: BigNumberish;
        price: BigNumberish;
        fee: BigNumberish;
        isLong: boolean;
        orderType: BigNumberish;
        isReduceOnly: boolean;
        timestamp: BigNumberish;
        expiry: BigNumberish;
        cancelOrderId: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    areNewOrdersPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "areNewOrdersPaused()"(overrides?: CallOverrides): Promise<BigNumber>;

    chainlinkCooldown(overrides?: CallOverrides): Promise<BigNumber>;

    "chainlinkCooldown()"(overrides?: CallOverrides): Promise<BigNumber>;

    get(orderId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "get(uint256)"(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMany(
      orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMany(uint256[])"(
      orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getMarketOrderCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketOrders(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketOrders(uint256)"(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTriggerOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getTriggerOrderCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTriggerOrders(
      length: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTriggerOrders(uint256,uint256)"(
      length: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserOrderCount(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserOrderCount(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserOrders(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getUserOrders(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    "gov()"(overrides?: CallOverrides): Promise<BigNumber>;

    isProcessingPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "isProcessingPaused()"(overrides?: CallOverrides): Promise<BigNumber>;

    isUserOrder(
      orderId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isUserOrder(uint256,address)"(
      orderId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxMarketOrderTTL(overrides?: CallOverrides): Promise<BigNumber>;

    "maxMarketOrderTTL()"(overrides?: CallOverrides): Promise<BigNumber>;

    maxTriggerOrderTTL(overrides?: CallOverrides): Promise<BigNumber>;

    "maxTriggerOrderTTL()"(overrides?: CallOverrides): Promise<BigNumber>;

    minOracleBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "minOracleBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    oid(overrides?: CallOverrides): Promise<BigNumber>;

    "oid()"(overrides?: CallOverrides): Promise<BigNumber>;

    remove(orderId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "remove(uint256)"(
      orderId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;

    "roleStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAreNewOrdersPaused(
      b: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAreNewOrdersPaused(bool)"(
      b: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setChainlinkCooldown(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setChainlinkCooldown(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGov(_gov: string, overrides?: Overrides): Promise<BigNumber>;

    "setGov(address)"(_gov: string, overrides?: Overrides): Promise<BigNumber>;

    setIsProcessingPaused(
      b: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setIsProcessingPaused(bool)"(
      b: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxMarketOrderTTL(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxMarketOrderTTL(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaxTriggerOrderTTL(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaxTriggerOrderTTL(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinOracleBalance(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinOracleBalance(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateCancelOrderId(
      orderId: BigNumberish,
      cancelOrderId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateCancelOrderId(uint256,uint256)"(
      orderId: BigNumberish,
      cancelOrderId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ORACLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    add(
      order: {
        orderId: BigNumberish;
        user: string;
        asset: string;
        market: string;
        margin: BigNumberish;
        size: BigNumberish;
        price: BigNumberish;
        fee: BigNumberish;
        isLong: boolean;
        orderType: BigNumberish;
        isReduceOnly: boolean;
        timestamp: BigNumberish;
        expiry: BigNumberish;
        cancelOrderId: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "add((uint256,address,address,string,uint256,uint256,uint256,uint256,bool,uint8,bool,uint256,uint256,uint256))"(
      order: {
        orderId: BigNumberish;
        user: string;
        asset: string;
        market: string;
        margin: BigNumberish;
        size: BigNumberish;
        price: BigNumberish;
        fee: BigNumberish;
        isLong: boolean;
        orderType: BigNumberish;
        isReduceOnly: boolean;
        timestamp: BigNumberish;
        expiry: BigNumberish;
        cancelOrderId: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    areNewOrdersPaused(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "areNewOrdersPaused()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainlinkCooldown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "chainlinkCooldown()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "get(uint256)"(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMany(
      orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMany(uint256[])"(
      orderIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketOrderCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketOrderCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketOrders(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketOrders(uint256)"(
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTriggerOrderCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTriggerOrderCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTriggerOrders(
      length: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTriggerOrders(uint256,uint256)"(
      length: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserOrderCount(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserOrderCount(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserOrders(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserOrders(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gov()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isProcessingPaused(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isProcessingPaused()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUserOrder(
      orderId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isUserOrder(uint256,address)"(
      orderId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxMarketOrderTTL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "maxMarketOrderTTL()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTriggerOrderTTL(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maxTriggerOrderTTL()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minOracleBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minOracleBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oid()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remove(
      orderId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "remove(uint256)"(
      orderId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "roleStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAreNewOrdersPaused(
      b: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAreNewOrdersPaused(bool)"(
      b: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setChainlinkCooldown(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setChainlinkCooldown(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGov(_gov: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "setGov(address)"(
      _gov: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setIsProcessingPaused(
      b: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setIsProcessingPaused(bool)"(
      b: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxMarketOrderTTL(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxMarketOrderTTL(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaxTriggerOrderTTL(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaxTriggerOrderTTL(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinOracleBalance(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinOracleBalance(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateCancelOrderId(
      orderId: BigNumberish,
      cancelOrderId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateCancelOrderId(uint256,uint256)"(
      orderId: BigNumberish,
      cancelOrderId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
