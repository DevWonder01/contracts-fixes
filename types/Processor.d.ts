/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ProcessorInterface extends ethers.utils.Interface {
  functions: {
    "BPS_DIVIDER()": FunctionFragment;
    "CONTRACT()": FunctionFragment;
    "DS()": FunctionFragment;
    "ORACLE()": FunctionFragment;
    "assetStore()": FunctionFragment;
    "chainlink()": FunctionFragment;
    "executeOrders(uint256[],uint256[])": FunctionFragment;
    "fundStore()": FunctionFragment;
    "funding()": FunctionFragment;
    "gov()": FunctionFragment;
    "link()": FunctionFragment;
    "liquidatePositions(address[],address[],string[],uint256[])": FunctionFragment;
    "marketStore()": FunctionFragment;
    "orderStore()": FunctionFragment;
    "orders()": FunctionFragment;
    "pool()": FunctionFragment;
    "poolStore()": FunctionFragment;
    "positionStore()": FunctionFragment;
    "positions()": FunctionFragment;
    "riskStore()": FunctionFragment;
    "roleStore()": FunctionFragment;
    "selfExecuteOrder(uint256)": FunctionFragment;
    "selfLiquidatePosition(address,address,string)": FunctionFragment;
    "setGov(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BPS_DIVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CONTRACT", values?: undefined): string;
  encodeFunctionData(functionFragment: "DS", values?: undefined): string;
  encodeFunctionData(functionFragment: "ORACLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetStore",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "chainlink", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeOrders",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "fundStore", values?: undefined): string;
  encodeFunctionData(functionFragment: "funding", values?: undefined): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(functionFragment: "link", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "liquidatePositions",
    values: [string[], string[], string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "marketStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orderStore",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "orders", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positionStore",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "positions", values?: undefined): string;
  encodeFunctionData(functionFragment: "riskStore", values?: undefined): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "selfExecuteOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "selfLiquidatePosition",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "BPS_DIVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CONTRACT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ORACLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assetStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chainlink", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "funding", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "link", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidatePositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positionStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "riskStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selfExecuteOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selfLiquidatePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;

  events: {
    "LiquidationError(address,address,string,uint256,string)": EventFragment;
    "PositionLiquidated(address,address,string,bool,uint256,uint256,uint256,uint256)": EventFragment;
    "SetGov(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidationError"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGov"): EventFragment;
}

export class Processor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ProcessorInterface;

  functions: {
    BPS_DIVIDER(overrides?: CallOverrides): Promise<[BigNumber]>;

    "BPS_DIVIDER()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<[string]>;

    DS(overrides?: CallOverrides): Promise<[string]>;

    "DS()"(overrides?: CallOverrides): Promise<[string]>;

    ORACLE(overrides?: CallOverrides): Promise<[string]>;

    "ORACLE()"(overrides?: CallOverrides): Promise<[string]>;

    assetStore(overrides?: CallOverrides): Promise<[string]>;

    "assetStore()"(overrides?: CallOverrides): Promise<[string]>;

    chainlink(overrides?: CallOverrides): Promise<[string]>;

    "chainlink()"(overrides?: CallOverrides): Promise<[string]>;

    executeOrders(
      orderIds: BigNumberish[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeOrders(uint256[],uint256[])"(
      orderIds: BigNumberish[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    fundStore(overrides?: CallOverrides): Promise<[string]>;

    "fundStore()"(overrides?: CallOverrides): Promise<[string]>;

    funding(overrides?: CallOverrides): Promise<[string]>;

    "funding()"(overrides?: CallOverrides): Promise<[string]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    "gov()"(overrides?: CallOverrides): Promise<[string]>;

    link(overrides?: Overrides): Promise<ContractTransaction>;

    "link()"(overrides?: Overrides): Promise<ContractTransaction>;

    liquidatePositions(
      users: string[],
      assets: string[],
      markets: string[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidatePositions(address[],address[],string[],uint256[])"(
      users: string[],
      assets: string[],
      markets: string[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    marketStore(overrides?: CallOverrides): Promise<[string]>;

    "marketStore()"(overrides?: CallOverrides): Promise<[string]>;

    orderStore(overrides?: CallOverrides): Promise<[string]>;

    "orderStore()"(overrides?: CallOverrides): Promise<[string]>;

    orders(overrides?: CallOverrides): Promise<[string]>;

    "orders()"(overrides?: CallOverrides): Promise<[string]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    "pool()"(overrides?: CallOverrides): Promise<[string]>;

    poolStore(overrides?: CallOverrides): Promise<[string]>;

    "poolStore()"(overrides?: CallOverrides): Promise<[string]>;

    positionStore(overrides?: CallOverrides): Promise<[string]>;

    "positionStore()"(overrides?: CallOverrides): Promise<[string]>;

    positions(overrides?: CallOverrides): Promise<[string]>;

    "positions()"(overrides?: CallOverrides): Promise<[string]>;

    riskStore(overrides?: CallOverrides): Promise<[string]>;

    "riskStore()"(overrides?: CallOverrides): Promise<[string]>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;

    "roleStore()"(overrides?: CallOverrides): Promise<[string]>;

    selfExecuteOrder(
      orderId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "selfExecuteOrder(uint256)"(
      orderId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    selfLiquidatePosition(
      user: string,
      asset: string,
      market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "selfLiquidatePosition(address,address,string)"(
      user: string,
      asset: string,
      market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGov(_gov: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setGov(address)"(
      _gov: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  BPS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

  "BPS_DIVIDER()"(overrides?: CallOverrides): Promise<BigNumber>;

  CONTRACT(overrides?: CallOverrides): Promise<string>;

  "CONTRACT()"(overrides?: CallOverrides): Promise<string>;

  DS(overrides?: CallOverrides): Promise<string>;

  "DS()"(overrides?: CallOverrides): Promise<string>;

  ORACLE(overrides?: CallOverrides): Promise<string>;

  "ORACLE()"(overrides?: CallOverrides): Promise<string>;

  assetStore(overrides?: CallOverrides): Promise<string>;

  "assetStore()"(overrides?: CallOverrides): Promise<string>;

  chainlink(overrides?: CallOverrides): Promise<string>;

  "chainlink()"(overrides?: CallOverrides): Promise<string>;

  executeOrders(
    orderIds: BigNumberish[],
    prices: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeOrders(uint256[],uint256[])"(
    orderIds: BigNumberish[],
    prices: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  fundStore(overrides?: CallOverrides): Promise<string>;

  "fundStore()"(overrides?: CallOverrides): Promise<string>;

  funding(overrides?: CallOverrides): Promise<string>;

  "funding()"(overrides?: CallOverrides): Promise<string>;

  gov(overrides?: CallOverrides): Promise<string>;

  "gov()"(overrides?: CallOverrides): Promise<string>;

  link(overrides?: Overrides): Promise<ContractTransaction>;

  "link()"(overrides?: Overrides): Promise<ContractTransaction>;

  liquidatePositions(
    users: string[],
    assets: string[],
    markets: string[],
    prices: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidatePositions(address[],address[],string[],uint256[])"(
    users: string[],
    assets: string[],
    markets: string[],
    prices: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  marketStore(overrides?: CallOverrides): Promise<string>;

  "marketStore()"(overrides?: CallOverrides): Promise<string>;

  orderStore(overrides?: CallOverrides): Promise<string>;

  "orderStore()"(overrides?: CallOverrides): Promise<string>;

  orders(overrides?: CallOverrides): Promise<string>;

  "orders()"(overrides?: CallOverrides): Promise<string>;

  pool(overrides?: CallOverrides): Promise<string>;

  "pool()"(overrides?: CallOverrides): Promise<string>;

  poolStore(overrides?: CallOverrides): Promise<string>;

  "poolStore()"(overrides?: CallOverrides): Promise<string>;

  positionStore(overrides?: CallOverrides): Promise<string>;

  "positionStore()"(overrides?: CallOverrides): Promise<string>;

  positions(overrides?: CallOverrides): Promise<string>;

  "positions()"(overrides?: CallOverrides): Promise<string>;

  riskStore(overrides?: CallOverrides): Promise<string>;

  "riskStore()"(overrides?: CallOverrides): Promise<string>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  "roleStore()"(overrides?: CallOverrides): Promise<string>;

  selfExecuteOrder(
    orderId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "selfExecuteOrder(uint256)"(
    orderId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  selfLiquidatePosition(
    user: string,
    asset: string,
    market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "selfLiquidatePosition(address,address,string)"(
    user: string,
    asset: string,
    market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGov(_gov: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setGov(address)"(
    _gov: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    BPS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    "BPS_DIVIDER()"(overrides?: CallOverrides): Promise<BigNumber>;

    CONTRACT(overrides?: CallOverrides): Promise<string>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<string>;

    DS(overrides?: CallOverrides): Promise<string>;

    "DS()"(overrides?: CallOverrides): Promise<string>;

    ORACLE(overrides?: CallOverrides): Promise<string>;

    "ORACLE()"(overrides?: CallOverrides): Promise<string>;

    assetStore(overrides?: CallOverrides): Promise<string>;

    "assetStore()"(overrides?: CallOverrides): Promise<string>;

    chainlink(overrides?: CallOverrides): Promise<string>;

    "chainlink()"(overrides?: CallOverrides): Promise<string>;

    executeOrders(
      orderIds: BigNumberish[],
      prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "executeOrders(uint256[],uint256[])"(
      orderIds: BigNumberish[],
      prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    fundStore(overrides?: CallOverrides): Promise<string>;

    "fundStore()"(overrides?: CallOverrides): Promise<string>;

    funding(overrides?: CallOverrides): Promise<string>;

    "funding()"(overrides?: CallOverrides): Promise<string>;

    gov(overrides?: CallOverrides): Promise<string>;

    "gov()"(overrides?: CallOverrides): Promise<string>;

    link(overrides?: CallOverrides): Promise<void>;

    "link()"(overrides?: CallOverrides): Promise<void>;

    liquidatePositions(
      users: string[],
      assets: string[],
      markets: string[],
      prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "liquidatePositions(address[],address[],string[],uint256[])"(
      users: string[],
      assets: string[],
      markets: string[],
      prices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    marketStore(overrides?: CallOverrides): Promise<string>;

    "marketStore()"(overrides?: CallOverrides): Promise<string>;

    orderStore(overrides?: CallOverrides): Promise<string>;

    "orderStore()"(overrides?: CallOverrides): Promise<string>;

    orders(overrides?: CallOverrides): Promise<string>;

    "orders()"(overrides?: CallOverrides): Promise<string>;

    pool(overrides?: CallOverrides): Promise<string>;

    "pool()"(overrides?: CallOverrides): Promise<string>;

    poolStore(overrides?: CallOverrides): Promise<string>;

    "poolStore()"(overrides?: CallOverrides): Promise<string>;

    positionStore(overrides?: CallOverrides): Promise<string>;

    "positionStore()"(overrides?: CallOverrides): Promise<string>;

    positions(overrides?: CallOverrides): Promise<string>;

    "positions()"(overrides?: CallOverrides): Promise<string>;

    riskStore(overrides?: CallOverrides): Promise<string>;

    "riskStore()"(overrides?: CallOverrides): Promise<string>;

    roleStore(overrides?: CallOverrides): Promise<string>;

    "roleStore()"(overrides?: CallOverrides): Promise<string>;

    selfExecuteOrder(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "selfExecuteOrder(uint256)"(
      orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    selfLiquidatePosition(
      user: string,
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "selfLiquidatePosition(address,address,string)"(
      user: string,
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    "setGov(address)"(_gov: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    LiquidationError(
      user: null,
      asset: null,
      market: null,
      price: null,
      reason: null
    ): EventFilter;

    PositionLiquidated(
      user: string | null,
      asset: string | null,
      market: null,
      isLong: null,
      size: null,
      margin: null,
      price: null,
      fee: null
    ): EventFilter;

    SetGov(prevGov: null, nextGov: null): EventFilter;
  };

  estimateGas: {
    BPS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    "BPS_DIVIDER()"(overrides?: CallOverrides): Promise<BigNumber>;

    CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<BigNumber>;

    DS(overrides?: CallOverrides): Promise<BigNumber>;

    "DS()"(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ORACLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetStore(overrides?: CallOverrides): Promise<BigNumber>;

    "assetStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    chainlink(overrides?: CallOverrides): Promise<BigNumber>;

    "chainlink()"(overrides?: CallOverrides): Promise<BigNumber>;

    executeOrders(
      orderIds: BigNumberish[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeOrders(uint256[],uint256[])"(
      orderIds: BigNumberish[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    fundStore(overrides?: CallOverrides): Promise<BigNumber>;

    "fundStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    funding(overrides?: CallOverrides): Promise<BigNumber>;

    "funding()"(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    "gov()"(overrides?: CallOverrides): Promise<BigNumber>;

    link(overrides?: Overrides): Promise<BigNumber>;

    "link()"(overrides?: Overrides): Promise<BigNumber>;

    liquidatePositions(
      users: string[],
      assets: string[],
      markets: string[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "liquidatePositions(address[],address[],string[],uint256[])"(
      users: string[],
      assets: string[],
      markets: string[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    marketStore(overrides?: CallOverrides): Promise<BigNumber>;

    "marketStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    orderStore(overrides?: CallOverrides): Promise<BigNumber>;

    "orderStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    orders(overrides?: CallOverrides): Promise<BigNumber>;

    "orders()"(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    "pool()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolStore(overrides?: CallOverrides): Promise<BigNumber>;

    "poolStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    positionStore(overrides?: CallOverrides): Promise<BigNumber>;

    "positionStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    positions(overrides?: CallOverrides): Promise<BigNumber>;

    "positions()"(overrides?: CallOverrides): Promise<BigNumber>;

    riskStore(overrides?: CallOverrides): Promise<BigNumber>;

    "riskStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;

    "roleStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    selfExecuteOrder(
      orderId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "selfExecuteOrder(uint256)"(
      orderId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    selfLiquidatePosition(
      user: string,
      asset: string,
      market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "selfLiquidatePosition(address,address,string)"(
      user: string,
      asset: string,
      market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGov(_gov: string, overrides?: Overrides): Promise<BigNumber>;

    "setGov(address)"(_gov: string, overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    BPS_DIVIDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BPS_DIVIDER()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ORACLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assetStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainlink(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "chainlink()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeOrders(
      orderIds: BigNumberish[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeOrders(uint256[],uint256[])"(
      orderIds: BigNumberish[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    fundStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fundStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    funding(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "funding()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gov()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    link(overrides?: Overrides): Promise<PopulatedTransaction>;

    "link()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    liquidatePositions(
      users: string[],
      assets: string[],
      markets: string[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidatePositions(address[],address[],string[],uint256[])"(
      users: string[],
      assets: string[],
      markets: string[],
      prices: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    marketStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "marketStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "orderStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "orders()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positionStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "positionStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "positions()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    riskStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "riskStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "roleStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    selfExecuteOrder(
      orderId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "selfExecuteOrder(uint256)"(
      orderId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    selfLiquidatePosition(
      user: string,
      asset: string,
      market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "selfLiquidatePosition(address,address,string)"(
      user: string,
      asset: string,
      market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGov(_gov: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "setGov(address)"(
      _gov: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
