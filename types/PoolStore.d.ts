/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PoolStoreInterface extends ethers.utils.Interface {
  functions: {
    "CONTRACT()": FunctionFragment;
    "ORACLE()": FunctionFragment;
    "bufferPayoutPeriod()": FunctionFragment;
    "decrementBalance(address,uint256)": FunctionFragment;
    "decrementBufferBalance(address,uint256)": FunctionFragment;
    "decrementClpSupply(address,uint256)": FunctionFragment;
    "decrementUserClpBalance(address,address,uint256)": FunctionFragment;
    "getAvailable(address)": FunctionFragment;
    "getBalance(address)": FunctionFragment;
    "getBalances(address[])": FunctionFragment;
    "getBufferBalance(address)": FunctionFragment;
    "getClpSupply(address)": FunctionFragment;
    "getLastDeposited(address,address)": FunctionFragment;
    "getLastPaid(address)": FunctionFragment;
    "getUserBalance(address,address)": FunctionFragment;
    "getUserBalances(address[],address)": FunctionFragment;
    "getUserClpBalance(address,address)": FunctionFragment;
    "getWithdrawalFee(address)": FunctionFragment;
    "gov()": FunctionFragment;
    "incrementBalance(address,uint256)": FunctionFragment;
    "incrementBufferBalance(address,uint256)": FunctionFragment;
    "incrementClpSupply(address,uint256)": FunctionFragment;
    "incrementUserClpBalance(address,address,uint256)": FunctionFragment;
    "roleStore()": FunctionFragment;
    "setBufferPayoutPeriod(uint256)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setLastDeposited(address,address,uint256)": FunctionFragment;
    "setLastPaid(address,uint256)": FunctionFragment;
    "setWithdrawalFee(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "CONTRACT", values?: undefined): string;
  encodeFunctionData(functionFragment: "ORACLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bufferPayoutPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decrementBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decrementBufferBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decrementClpSupply",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decrementUserClpBalance",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailable",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getBalance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getBalances",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getBufferBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getClpSupply",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastDeposited",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getLastPaid", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getUserBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBalances",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserClpBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalFee",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "incrementBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementBufferBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementClpSupply",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementUserClpBalance",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBufferPayoutPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setLastDeposited",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLastPaid",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawalFee",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "CONTRACT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ORACLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bufferPayoutPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decrementBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decrementBufferBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decrementClpSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decrementUserClpBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBufferBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClpSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserClpBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incrementBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementBufferBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementClpSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementUserClpBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBufferPayoutPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLastDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLastPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawalFee",
    data: BytesLike
  ): Result;

  events: {
    "SetGov(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetGov"): EventFragment;
}

export class PoolStore extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PoolStoreInterface;

  functions: {
    CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<[string]>;

    ORACLE(overrides?: CallOverrides): Promise<[string]>;

    "ORACLE()"(overrides?: CallOverrides): Promise<[string]>;

    bufferPayoutPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "bufferPayoutPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    decrementBalance(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decrementBalance(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decrementBufferBalance(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decrementBufferBalance(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decrementClpSupply(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decrementClpSupply(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decrementUserClpBalance(
      asset: string,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decrementUserClpBalance(address,address,uint256)"(
      asset: string,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getAvailable(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getAvailable(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBalance(asset: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getBalance(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBalances(
      _assets: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _balances: BigNumber[] }>;

    "getBalances(address[])"(
      _assets: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _balances: BigNumber[] }>;

    getBufferBalance(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getBufferBalance(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClpSupply(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getClpSupply(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLastDeposited(
      asset: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getLastDeposited(address,address)"(
      asset: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLastPaid(asset: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getLastPaid(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserBalance(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getUserBalance(address,address)"(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserBalances(
      _assets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _balances: BigNumber[] }>;

    "getUserBalances(address[],address)"(
      _assets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _balances: BigNumber[] }>;

    getUserClpBalance(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getUserClpBalance(address,address)"(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWithdrawalFee(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getWithdrawalFee(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    "gov()"(overrides?: CallOverrides): Promise<[string]>;

    incrementBalance(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "incrementBalance(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    incrementBufferBalance(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "incrementBufferBalance(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    incrementClpSupply(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "incrementClpSupply(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    incrementUserClpBalance(
      asset: string,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "incrementUserClpBalance(address,address,uint256)"(
      asset: string,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;

    "roleStore()"(overrides?: CallOverrides): Promise<[string]>;

    setBufferPayoutPeriod(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBufferPayoutPeriod(uint256)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGov(_gov: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setGov(address)"(
      _gov: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLastDeposited(
      asset: string,
      user: string,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLastDeposited(address,address,uint256)"(
      asset: string,
      user: string,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLastPaid(
      asset: string,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLastPaid(address,uint256)"(
      asset: string,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setWithdrawalFee(
      asset: string,
      bps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWithdrawalFee(address,uint256)"(
      asset: string,
      bps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  CONTRACT(overrides?: CallOverrides): Promise<string>;

  "CONTRACT()"(overrides?: CallOverrides): Promise<string>;

  ORACLE(overrides?: CallOverrides): Promise<string>;

  "ORACLE()"(overrides?: CallOverrides): Promise<string>;

  bufferPayoutPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "bufferPayoutPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  decrementBalance(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decrementBalance(address,uint256)"(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decrementBufferBalance(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decrementBufferBalance(address,uint256)"(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decrementClpSupply(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decrementClpSupply(address,uint256)"(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decrementUserClpBalance(
    asset: string,
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decrementUserClpBalance(address,address,uint256)"(
    asset: string,
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getAvailable(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getAvailable(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBalance(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getBalance(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBalances(
    _assets: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getBalances(address[])"(
    _assets: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getBufferBalance(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getBufferBalance(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClpSupply(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getClpSupply(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLastDeposited(
    asset: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLastDeposited(address,address)"(
    asset: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getLastPaid(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getLastPaid(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserBalance(
    asset: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUserBalance(address,address)"(
    asset: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserBalances(
    _assets: string[],
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getUserBalances(address[],address)"(
    _assets: string[],
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getUserClpBalance(
    asset: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUserClpBalance(address,address)"(
    asset: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWithdrawalFee(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getWithdrawalFee(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  "gov()"(overrides?: CallOverrides): Promise<string>;

  incrementBalance(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "incrementBalance(address,uint256)"(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  incrementBufferBalance(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "incrementBufferBalance(address,uint256)"(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  incrementClpSupply(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "incrementClpSupply(address,uint256)"(
    asset: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  incrementUserClpBalance(
    asset: string,
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "incrementUserClpBalance(address,address,uint256)"(
    asset: string,
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  "roleStore()"(overrides?: CallOverrides): Promise<string>;

  setBufferPayoutPeriod(
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBufferPayoutPeriod(uint256)"(
    time: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGov(_gov: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setGov(address)"(
    _gov: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLastDeposited(
    asset: string,
    user: string,
    timestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLastDeposited(address,address,uint256)"(
    asset: string,
    user: string,
    timestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLastPaid(
    asset: string,
    timestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLastPaid(address,uint256)"(
    asset: string,
    timestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setWithdrawalFee(
    asset: string,
    bps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWithdrawalFee(address,uint256)"(
    asset: string,
    bps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    CONTRACT(overrides?: CallOverrides): Promise<string>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<string>;

    ORACLE(overrides?: CallOverrides): Promise<string>;

    "ORACLE()"(overrides?: CallOverrides): Promise<string>;

    bufferPayoutPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "bufferPayoutPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    decrementBalance(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "decrementBalance(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decrementBufferBalance(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "decrementBufferBalance(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decrementClpSupply(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "decrementClpSupply(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    decrementUserClpBalance(
      asset: string,
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "decrementUserClpBalance(address,address,uint256)"(
      asset: string,
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAvailable(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getAvailable(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getBalance(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalances(
      _assets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getBalances(address[])"(
      _assets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getBufferBalance(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBufferBalance(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClpSupply(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getClpSupply(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastDeposited(
      asset: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastDeposited(address,address)"(
      asset: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastPaid(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getLastPaid(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserBalance(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserBalance(address,address)"(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserBalances(
      _assets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getUserBalances(address[],address)"(
      _assets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getUserClpBalance(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserClpBalance(address,address)"(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalFee(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWithdrawalFee(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    "gov()"(overrides?: CallOverrides): Promise<string>;

    incrementBalance(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "incrementBalance(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    incrementBufferBalance(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "incrementBufferBalance(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    incrementClpSupply(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "incrementClpSupply(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    incrementUserClpBalance(
      asset: string,
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "incrementUserClpBalance(address,address,uint256)"(
      asset: string,
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    roleStore(overrides?: CallOverrides): Promise<string>;

    "roleStore()"(overrides?: CallOverrides): Promise<string>;

    setBufferPayoutPeriod(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBufferPayoutPeriod(uint256)"(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    "setGov(address)"(_gov: string, overrides?: CallOverrides): Promise<void>;

    setLastDeposited(
      asset: string,
      user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLastDeposited(address,address,uint256)"(
      asset: string,
      user: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLastPaid(
      asset: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLastPaid(address,uint256)"(
      asset: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWithdrawalFee(
      asset: string,
      bps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWithdrawalFee(address,uint256)"(
      asset: string,
      bps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    SetGov(prevGov: null, nextGov: null): EventFilter;
  };

  estimateGas: {
    CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ORACLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    bufferPayoutPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "bufferPayoutPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    decrementBalance(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decrementBalance(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decrementBufferBalance(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decrementBufferBalance(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decrementClpSupply(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decrementClpSupply(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decrementUserClpBalance(
      asset: string,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decrementUserClpBalance(address,address,uint256)"(
      asset: string,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getAvailable(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getAvailable(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getBalance(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalances(
      _assets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBalances(address[])"(
      _assets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBufferBalance(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBufferBalance(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClpSupply(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getClpSupply(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastDeposited(
      asset: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastDeposited(address,address)"(
      asset: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastPaid(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getLastPaid(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserBalance(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserBalance(address,address)"(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserBalances(
      _assets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserBalances(address[],address)"(
      _assets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserClpBalance(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserClpBalance(address,address)"(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalFee(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWithdrawalFee(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    "gov()"(overrides?: CallOverrides): Promise<BigNumber>;

    incrementBalance(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "incrementBalance(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    incrementBufferBalance(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "incrementBufferBalance(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    incrementClpSupply(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "incrementClpSupply(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    incrementUserClpBalance(
      asset: string,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "incrementUserClpBalance(address,address,uint256)"(
      asset: string,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;

    "roleStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    setBufferPayoutPeriod(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBufferPayoutPeriod(uint256)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGov(_gov: string, overrides?: Overrides): Promise<BigNumber>;

    "setGov(address)"(_gov: string, overrides?: Overrides): Promise<BigNumber>;

    setLastDeposited(
      asset: string,
      user: string,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLastDeposited(address,address,uint256)"(
      asset: string,
      user: string,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLastPaid(
      asset: string,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLastPaid(address,uint256)"(
      asset: string,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setWithdrawalFee(
      asset: string,
      bps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setWithdrawalFee(address,uint256)"(
      asset: string,
      bps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ORACLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bufferPayoutPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bufferPayoutPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decrementBalance(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decrementBalance(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decrementBufferBalance(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decrementBufferBalance(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decrementClpSupply(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decrementClpSupply(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decrementUserClpBalance(
      asset: string,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decrementUserClpBalance(address,address,uint256)"(
      asset: string,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getAvailable(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAvailable(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBalance(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalances(
      _assets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBalances(address[])"(
      _assets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBufferBalance(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBufferBalance(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClpSupply(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getClpSupply(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastDeposited(
      asset: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLastDeposited(address,address)"(
      asset: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastPaid(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLastPaid(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserBalance(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserBalance(address,address)"(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserBalances(
      _assets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserBalances(address[],address)"(
      _assets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserClpBalance(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserClpBalance(address,address)"(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalFee(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWithdrawalFee(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gov()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incrementBalance(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "incrementBalance(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    incrementBufferBalance(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "incrementBufferBalance(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    incrementClpSupply(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "incrementClpSupply(address,uint256)"(
      asset: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    incrementUserClpBalance(
      asset: string,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "incrementUserClpBalance(address,address,uint256)"(
      asset: string,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "roleStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBufferPayoutPeriod(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBufferPayoutPeriod(uint256)"(
      time: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGov(_gov: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "setGov(address)"(
      _gov: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLastDeposited(
      asset: string,
      user: string,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLastDeposited(address,address,uint256)"(
      asset: string,
      user: string,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLastPaid(
      asset: string,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLastPaid(address,uint256)"(
      asset: string,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setWithdrawalFee(
      asset: string,
      bps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWithdrawalFee(address,uint256)"(
      asset: string,
      bps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
