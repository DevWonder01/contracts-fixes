/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PositionStoreInterface extends ethers.utils.Interface {
  functions: {
    "CONTRACT()": FunctionFragment;
    "ORACLE()": FunctionFragment;
    "addOrUpdate(tuple)": FunctionFragment;
    "decrementOI(address,string,uint256,bool)": FunctionFragment;
    "get(address,address,string)": FunctionFragment;
    "getOI(address,string)": FunctionFragment;
    "getOILong(address,string)": FunctionFragment;
    "getOIShort(address,string)": FunctionFragment;
    "getPosition(address,address,string)": FunctionFragment;
    "getPositionCount()": FunctionFragment;
    "getPositions(bytes32[])": FunctionFragment;
    "getUserPositions(address)": FunctionFragment;
    "gov()": FunctionFragment;
    "incrementOI(address,string,uint256,bool)": FunctionFragment;
    "oracleFeeShare()": FunctionFragment;
    "remove(address,address,string)": FunctionFragment;
    "removeMarginBuffer()": FunctionFragment;
    "roleStore()": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setOracleFeeShare(uint256)": FunctionFragment;
    "setRemoveMarginBuffer(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "CONTRACT", values?: undefined): string;
  encodeFunctionData(functionFragment: "ORACLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addOrUpdate",
    values: [
      {
        user: string;
        asset: string;
        market: string;
        isLong: boolean;
        size: BigNumberish;
        margin: BigNumberish;
        fundingTracker: BigNumberish;
        price: BigNumberish;
        timestamp: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decrementOI",
    values: [string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "get",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOI",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOILong",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOIShort",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPositions",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPositions",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "incrementOI",
    values: [string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleFeeShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMarginBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setOracleFeeShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRemoveMarginBuffer",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "CONTRACT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ORACLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addOrUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decrementOI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOILong", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOIShort", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incrementOI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleFeeShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMarginBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOracleFeeShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRemoveMarginBuffer",
    data: BytesLike
  ): Result;

  events: {
    "SetGov(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetGov"): EventFragment;
}

export class PositionStore extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PositionStoreInterface;

  functions: {
    CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<[string]>;

    ORACLE(overrides?: CallOverrides): Promise<[string]>;

    "ORACLE()"(overrides?: CallOverrides): Promise<[string]>;

    addOrUpdate(
      position: {
        user: string;
        asset: string;
        market: string;
        isLong: boolean;
        size: BigNumberish;
        margin: BigNumberish;
        fundingTracker: BigNumberish;
        price: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addOrUpdate((address,address,string,bool,uint256,uint256,int256,uint256,uint256))"(
      position: {
        user: string;
        asset: string;
        market: string;
        isLong: boolean;
        size: BigNumberish;
        margin: BigNumberish;
        fundingTracker: BigNumberish;
        price: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decrementOI(
      asset: string,
      market: string,
      amount: BigNumberish,
      isLong: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decrementOI(address,string,uint256,bool)"(
      asset: string,
      market: string,
      amount: BigNumberish,
      isLong: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    get(
      user: string,
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          user: string;
          asset: string;
          market: string;
          isLong: boolean;
          size: BigNumber;
          margin: BigNumber;
          fundingTracker: BigNumber;
          price: BigNumber;
          timestamp: BigNumber;
        }
      ]
    >;

    "get(address,address,string)"(
      user: string,
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          user: string;
          asset: string;
          market: string;
          isLong: boolean;
          size: BigNumber;
          margin: BigNumber;
          fundingTracker: BigNumber;
          price: BigNumber;
          timestamp: BigNumber;
        }
      ]
    >;

    getOI(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getOI(address,string)"(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOILong(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getOILong(address,string)"(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOIShort(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getOIShort(address,string)"(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPosition(
      user: string,
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          user: string;
          asset: string;
          market: string;
          isLong: boolean;
          size: BigNumber;
          margin: BigNumber;
          fundingTracker: BigNumber;
          price: BigNumber;
          timestamp: BigNumber;
        }
      ] & {
        position: [
          string,
          string,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          user: string;
          asset: string;
          market: string;
          isLong: boolean;
          size: BigNumber;
          margin: BigNumber;
          fundingTracker: BigNumber;
          price: BigNumber;
          timestamp: BigNumber;
        };
      }
    >;

    "getPosition(address,address,string)"(
      user: string,
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          user: string;
          asset: string;
          market: string;
          isLong: boolean;
          size: BigNumber;
          margin: BigNumber;
          fundingTracker: BigNumber;
          price: BigNumber;
          timestamp: BigNumber;
        }
      ] & {
        position: [
          string,
          string,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          user: string;
          asset: string;
          market: string;
          isLong: boolean;
          size: BigNumber;
          margin: BigNumber;
          fundingTracker: BigNumber;
          price: BigNumber;
          timestamp: BigNumber;
        };
      }
    >;

    getPositionCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getPositionCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getPositions(bytes32[])"(
      keys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          user: string;
          asset: string;
          market: string;
          isLong: boolean;
          size: BigNumber;
          margin: BigNumber;
          fundingTracker: BigNumber;
          price: BigNumber;
          timestamp: BigNumber;
        })[]
      ] & {
        _positions: ([
          string,
          string,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          user: string;
          asset: string;
          market: string;
          isLong: boolean;
          size: BigNumber;
          margin: BigNumber;
          fundingTracker: BigNumber;
          price: BigNumber;
          timestamp: BigNumber;
        })[];
      }
    >;

    "getPositions(uint256,uint256)"(
      length: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          user: string;
          asset: string;
          market: string;
          isLong: boolean;
          size: BigNumber;
          margin: BigNumber;
          fundingTracker: BigNumber;
          price: BigNumber;
          timestamp: BigNumber;
        })[]
      ] & {
        _positions: ([
          string,
          string,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          user: string;
          asset: string;
          market: string;
          isLong: boolean;
          size: BigNumber;
          margin: BigNumber;
          fundingTracker: BigNumber;
          price: BigNumber;
          timestamp: BigNumber;
        })[];
      }
    >;

    "getPositions(address[],address[],string[])"(
      users: string[],
      assets: string[],
      markets: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          user: string;
          asset: string;
          market: string;
          isLong: boolean;
          size: BigNumber;
          margin: BigNumber;
          fundingTracker: BigNumber;
          price: BigNumber;
          timestamp: BigNumber;
        })[]
      ] & {
        _positions: ([
          string,
          string,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          user: string;
          asset: string;
          market: string;
          isLong: boolean;
          size: BigNumber;
          margin: BigNumber;
          fundingTracker: BigNumber;
          price: BigNumber;
          timestamp: BigNumber;
        })[];
      }
    >;

    getUserPositions(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          user: string;
          asset: string;
          market: string;
          isLong: boolean;
          size: BigNumber;
          margin: BigNumber;
          fundingTracker: BigNumber;
          price: BigNumber;
          timestamp: BigNumber;
        })[]
      ] & {
        _positions: ([
          string,
          string,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          user: string;
          asset: string;
          market: string;
          isLong: boolean;
          size: BigNumber;
          margin: BigNumber;
          fundingTracker: BigNumber;
          price: BigNumber;
          timestamp: BigNumber;
        })[];
      }
    >;

    "getUserPositions(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          user: string;
          asset: string;
          market: string;
          isLong: boolean;
          size: BigNumber;
          margin: BigNumber;
          fundingTracker: BigNumber;
          price: BigNumber;
          timestamp: BigNumber;
        })[]
      ] & {
        _positions: ([
          string,
          string,
          string,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ] & {
          user: string;
          asset: string;
          market: string;
          isLong: boolean;
          size: BigNumber;
          margin: BigNumber;
          fundingTracker: BigNumber;
          price: BigNumber;
          timestamp: BigNumber;
        })[];
      }
    >;

    gov(overrides?: CallOverrides): Promise<[string]>;

    "gov()"(overrides?: CallOverrides): Promise<[string]>;

    incrementOI(
      asset: string,
      market: string,
      amount: BigNumberish,
      isLong: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "incrementOI(address,string,uint256,bool)"(
      asset: string,
      market: string,
      amount: BigNumberish,
      isLong: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    oracleFeeShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    "oracleFeeShare()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    remove(
      user: string,
      asset: string,
      market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "remove(address,address,string)"(
      user: string,
      asset: string,
      market: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeMarginBuffer(overrides?: CallOverrides): Promise<[BigNumber]>;

    "removeMarginBuffer()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;

    "roleStore()"(overrides?: CallOverrides): Promise<[string]>;

    setGov(_gov: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setGov(address)"(
      _gov: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOracleFeeShare(
      bps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOracleFeeShare(uint256)"(
      bps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRemoveMarginBuffer(
      bps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRemoveMarginBuffer(uint256)"(
      bps: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  CONTRACT(overrides?: CallOverrides): Promise<string>;

  "CONTRACT()"(overrides?: CallOverrides): Promise<string>;

  ORACLE(overrides?: CallOverrides): Promise<string>;

  "ORACLE()"(overrides?: CallOverrides): Promise<string>;

  addOrUpdate(
    position: {
      user: string;
      asset: string;
      market: string;
      isLong: boolean;
      size: BigNumberish;
      margin: BigNumberish;
      fundingTracker: BigNumberish;
      price: BigNumberish;
      timestamp: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addOrUpdate((address,address,string,bool,uint256,uint256,int256,uint256,uint256))"(
    position: {
      user: string;
      asset: string;
      market: string;
      isLong: boolean;
      size: BigNumberish;
      margin: BigNumberish;
      fundingTracker: BigNumberish;
      price: BigNumberish;
      timestamp: BigNumberish;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decrementOI(
    asset: string,
    market: string,
    amount: BigNumberish,
    isLong: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decrementOI(address,string,uint256,bool)"(
    asset: string,
    market: string,
    amount: BigNumberish,
    isLong: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  get(
    user: string,
    asset: string,
    market: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      user: string;
      asset: string;
      market: string;
      isLong: boolean;
      size: BigNumber;
      margin: BigNumber;
      fundingTracker: BigNumber;
      price: BigNumber;
      timestamp: BigNumber;
    }
  >;

  "get(address,address,string)"(
    user: string,
    asset: string,
    market: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      user: string;
      asset: string;
      market: string;
      isLong: boolean;
      size: BigNumber;
      margin: BigNumber;
      fundingTracker: BigNumber;
      price: BigNumber;
      timestamp: BigNumber;
    }
  >;

  getOI(
    asset: string,
    market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getOI(address,string)"(
    asset: string,
    market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOILong(
    asset: string,
    market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getOILong(address,string)"(
    asset: string,
    market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOIShort(
    asset: string,
    market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getOIShort(address,string)"(
    asset: string,
    market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPosition(
    user: string,
    asset: string,
    market: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      user: string;
      asset: string;
      market: string;
      isLong: boolean;
      size: BigNumber;
      margin: BigNumber;
      fundingTracker: BigNumber;
      price: BigNumber;
      timestamp: BigNumber;
    }
  >;

  "getPosition(address,address,string)"(
    user: string,
    asset: string,
    market: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      user: string;
      asset: string;
      market: string;
      isLong: boolean;
      size: BigNumber;
      margin: BigNumber;
      fundingTracker: BigNumber;
      price: BigNumber;
      timestamp: BigNumber;
    }
  >;

  getPositionCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getPositionCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  "getPositions(bytes32[])"(
    keys: BytesLike[],
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      user: string;
      asset: string;
      market: string;
      isLong: boolean;
      size: BigNumber;
      margin: BigNumber;
      fundingTracker: BigNumber;
      price: BigNumber;
      timestamp: BigNumber;
    })[]
  >;

  "getPositions(uint256,uint256)"(
    length: BigNumberish,
    offset: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      user: string;
      asset: string;
      market: string;
      isLong: boolean;
      size: BigNumber;
      margin: BigNumber;
      fundingTracker: BigNumber;
      price: BigNumber;
      timestamp: BigNumber;
    })[]
  >;

  "getPositions(address[],address[],string[])"(
    users: string[],
    assets: string[],
    markets: string[],
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      user: string;
      asset: string;
      market: string;
      isLong: boolean;
      size: BigNumber;
      margin: BigNumber;
      fundingTracker: BigNumber;
      price: BigNumber;
      timestamp: BigNumber;
    })[]
  >;

  getUserPositions(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      user: string;
      asset: string;
      market: string;
      isLong: boolean;
      size: BigNumber;
      margin: BigNumber;
      fundingTracker: BigNumber;
      price: BigNumber;
      timestamp: BigNumber;
    })[]
  >;

  "getUserPositions(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      string,
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      user: string;
      asset: string;
      market: string;
      isLong: boolean;
      size: BigNumber;
      margin: BigNumber;
      fundingTracker: BigNumber;
      price: BigNumber;
      timestamp: BigNumber;
    })[]
  >;

  gov(overrides?: CallOverrides): Promise<string>;

  "gov()"(overrides?: CallOverrides): Promise<string>;

  incrementOI(
    asset: string,
    market: string,
    amount: BigNumberish,
    isLong: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "incrementOI(address,string,uint256,bool)"(
    asset: string,
    market: string,
    amount: BigNumberish,
    isLong: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  oracleFeeShare(overrides?: CallOverrides): Promise<BigNumber>;

  "oracleFeeShare()"(overrides?: CallOverrides): Promise<BigNumber>;

  remove(
    user: string,
    asset: string,
    market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "remove(address,address,string)"(
    user: string,
    asset: string,
    market: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeMarginBuffer(overrides?: CallOverrides): Promise<BigNumber>;

  "removeMarginBuffer()"(overrides?: CallOverrides): Promise<BigNumber>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  "roleStore()"(overrides?: CallOverrides): Promise<string>;

  setGov(_gov: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setGov(address)"(
    _gov: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOracleFeeShare(
    bps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOracleFeeShare(uint256)"(
    bps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRemoveMarginBuffer(
    bps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRemoveMarginBuffer(uint256)"(
    bps: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    CONTRACT(overrides?: CallOverrides): Promise<string>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<string>;

    ORACLE(overrides?: CallOverrides): Promise<string>;

    "ORACLE()"(overrides?: CallOverrides): Promise<string>;

    addOrUpdate(
      position: {
        user: string;
        asset: string;
        market: string;
        isLong: boolean;
        size: BigNumberish;
        margin: BigNumberish;
        fundingTracker: BigNumberish;
        price: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "addOrUpdate((address,address,string,bool,uint256,uint256,int256,uint256,uint256))"(
      position: {
        user: string;
        asset: string;
        market: string;
        isLong: boolean;
        size: BigNumberish;
        margin: BigNumberish;
        fundingTracker: BigNumberish;
        price: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    decrementOI(
      asset: string,
      market: string,
      amount: BigNumberish,
      isLong: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "decrementOI(address,string,uint256,bool)"(
      asset: string,
      market: string,
      amount: BigNumberish,
      isLong: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    get(
      user: string,
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        user: string;
        asset: string;
        market: string;
        isLong: boolean;
        size: BigNumber;
        margin: BigNumber;
        fundingTracker: BigNumber;
        price: BigNumber;
        timestamp: BigNumber;
      }
    >;

    "get(address,address,string)"(
      user: string,
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        user: string;
        asset: string;
        market: string;
        isLong: boolean;
        size: BigNumber;
        margin: BigNumber;
        fundingTracker: BigNumber;
        price: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getOI(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOI(address,string)"(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOILong(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOILong(address,string)"(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOIShort(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOIShort(address,string)"(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      user: string,
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        user: string;
        asset: string;
        market: string;
        isLong: boolean;
        size: BigNumber;
        margin: BigNumber;
        fundingTracker: BigNumber;
        price: BigNumber;
        timestamp: BigNumber;
      }
    >;

    "getPosition(address,address,string)"(
      user: string,
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        user: string;
        asset: string;
        market: string;
        isLong: boolean;
        size: BigNumber;
        margin: BigNumber;
        fundingTracker: BigNumber;
        price: BigNumber;
        timestamp: BigNumber;
      }
    >;

    getPositionCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getPositionCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getPositions(bytes32[])"(
      keys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        user: string;
        asset: string;
        market: string;
        isLong: boolean;
        size: BigNumber;
        margin: BigNumber;
        fundingTracker: BigNumber;
        price: BigNumber;
        timestamp: BigNumber;
      })[]
    >;

    "getPositions(uint256,uint256)"(
      length: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        user: string;
        asset: string;
        market: string;
        isLong: boolean;
        size: BigNumber;
        margin: BigNumber;
        fundingTracker: BigNumber;
        price: BigNumber;
        timestamp: BigNumber;
      })[]
    >;

    "getPositions(address[],address[],string[])"(
      users: string[],
      assets: string[],
      markets: string[],
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        user: string;
        asset: string;
        market: string;
        isLong: boolean;
        size: BigNumber;
        margin: BigNumber;
        fundingTracker: BigNumber;
        price: BigNumber;
        timestamp: BigNumber;
      })[]
    >;

    getUserPositions(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        user: string;
        asset: string;
        market: string;
        isLong: boolean;
        size: BigNumber;
        margin: BigNumber;
        fundingTracker: BigNumber;
        price: BigNumber;
        timestamp: BigNumber;
      })[]
    >;

    "getUserPositions(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        string,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        user: string;
        asset: string;
        market: string;
        isLong: boolean;
        size: BigNumber;
        margin: BigNumber;
        fundingTracker: BigNumber;
        price: BigNumber;
        timestamp: BigNumber;
      })[]
    >;

    gov(overrides?: CallOverrides): Promise<string>;

    "gov()"(overrides?: CallOverrides): Promise<string>;

    incrementOI(
      asset: string,
      market: string,
      amount: BigNumberish,
      isLong: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "incrementOI(address,string,uint256,bool)"(
      asset: string,
      market: string,
      amount: BigNumberish,
      isLong: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    oracleFeeShare(overrides?: CallOverrides): Promise<BigNumber>;

    "oracleFeeShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    remove(
      user: string,
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "remove(address,address,string)"(
      user: string,
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMarginBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    "removeMarginBuffer()"(overrides?: CallOverrides): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<string>;

    "roleStore()"(overrides?: CallOverrides): Promise<string>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    "setGov(address)"(_gov: string, overrides?: CallOverrides): Promise<void>;

    setOracleFeeShare(
      bps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOracleFeeShare(uint256)"(
      bps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRemoveMarginBuffer(
      bps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRemoveMarginBuffer(uint256)"(
      bps: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    SetGov(prevGov: null, nextGov: null): EventFilter;
  };

  estimateGas: {
    CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ORACLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    addOrUpdate(
      position: {
        user: string;
        asset: string;
        market: string;
        isLong: boolean;
        size: BigNumberish;
        margin: BigNumberish;
        fundingTracker: BigNumberish;
        price: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addOrUpdate((address,address,string,bool,uint256,uint256,int256,uint256,uint256))"(
      position: {
        user: string;
        asset: string;
        market: string;
        isLong: boolean;
        size: BigNumberish;
        margin: BigNumberish;
        fundingTracker: BigNumberish;
        price: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    decrementOI(
      asset: string,
      market: string,
      amount: BigNumberish,
      isLong: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decrementOI(address,string,uint256,bool)"(
      asset: string,
      market: string,
      amount: BigNumberish,
      isLong: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    get(
      user: string,
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "get(address,address,string)"(
      user: string,
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOI(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOI(address,string)"(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOILong(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOILong(address,string)"(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOIShort(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOIShort(address,string)"(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      user: string,
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPosition(address,address,string)"(
      user: string,
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getPositionCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    "getPositions(bytes32[])"(
      keys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPositions(uint256,uint256)"(
      length: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPositions(address[],address[],string[])"(
      users: string[],
      assets: string[],
      markets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserPositions(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserPositions(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    "gov()"(overrides?: CallOverrides): Promise<BigNumber>;

    incrementOI(
      asset: string,
      market: string,
      amount: BigNumberish,
      isLong: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "incrementOI(address,string,uint256,bool)"(
      asset: string,
      market: string,
      amount: BigNumberish,
      isLong: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    oracleFeeShare(overrides?: CallOverrides): Promise<BigNumber>;

    "oracleFeeShare()"(overrides?: CallOverrides): Promise<BigNumber>;

    remove(
      user: string,
      asset: string,
      market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "remove(address,address,string)"(
      user: string,
      asset: string,
      market: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeMarginBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    "removeMarginBuffer()"(overrides?: CallOverrides): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;

    "roleStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    setGov(_gov: string, overrides?: Overrides): Promise<BigNumber>;

    "setGov(address)"(_gov: string, overrides?: Overrides): Promise<BigNumber>;

    setOracleFeeShare(
      bps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setOracleFeeShare(uint256)"(
      bps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRemoveMarginBuffer(
      bps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRemoveMarginBuffer(uint256)"(
      bps: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ORACLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addOrUpdate(
      position: {
        user: string;
        asset: string;
        market: string;
        isLong: boolean;
        size: BigNumberish;
        margin: BigNumberish;
        fundingTracker: BigNumberish;
        price: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addOrUpdate((address,address,string,bool,uint256,uint256,int256,uint256,uint256))"(
      position: {
        user: string;
        asset: string;
        market: string;
        isLong: boolean;
        size: BigNumberish;
        margin: BigNumberish;
        fundingTracker: BigNumberish;
        price: BigNumberish;
        timestamp: BigNumberish;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decrementOI(
      asset: string,
      market: string,
      amount: BigNumberish,
      isLong: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decrementOI(address,string,uint256,bool)"(
      asset: string,
      market: string,
      amount: BigNumberish,
      isLong: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    get(
      user: string,
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "get(address,address,string)"(
      user: string,
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOI(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOI(address,string)"(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOILong(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOILong(address,string)"(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOIShort(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOIShort(address,string)"(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      user: string,
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPosition(address,address,string)"(
      user: string,
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPositionCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPositions(bytes32[])"(
      keys: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPositions(uint256,uint256)"(
      length: BigNumberish,
      offset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPositions(address[],address[],string[])"(
      users: string[],
      assets: string[],
      markets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserPositions(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserPositions(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gov()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incrementOI(
      asset: string,
      market: string,
      amount: BigNumberish,
      isLong: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "incrementOI(address,string,uint256,bool)"(
      asset: string,
      market: string,
      amount: BigNumberish,
      isLong: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    oracleFeeShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oracleFeeShare()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    remove(
      user: string,
      asset: string,
      market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "remove(address,address,string)"(
      user: string,
      asset: string,
      market: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeMarginBuffer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "removeMarginBuffer()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "roleStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGov(_gov: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "setGov(address)"(
      _gov: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOracleFeeShare(
      bps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOracleFeeShare(uint256)"(
      bps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRemoveMarginBuffer(
      bps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRemoveMarginBuffer(uint256)"(
      bps: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
