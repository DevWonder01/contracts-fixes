/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface StakingInterface extends ethers.utils.Interface {
  functions: {
    "BPS_DIVIDER()": FunctionFragment;
    "CONTRACT()": FunctionFragment;
    "DS()": FunctionFragment;
    "ORACLE()": FunctionFragment;
    "UNIT()": FunctionFragment;
    "assetStore()": FunctionFragment;
    "cap()": FunctionFragment;
    "collectMultiple(address[])": FunctionFragment;
    "collectReward(address)": FunctionFragment;
    "fundStore()": FunctionFragment;
    "getClaimableReward(address,address)": FunctionFragment;
    "getClaimableRewards(address[],address)": FunctionFragment;
    "gov()": FunctionFragment;
    "link()": FunctionFragment;
    "roleStore()": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakingStore()": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "updateRewards(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BPS_DIVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "CONTRACT", values?: undefined): string;
  encodeFunctionData(functionFragment: "DS", values?: undefined): string;
  encodeFunctionData(functionFragment: "ORACLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "UNIT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetStore",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collectMultiple",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collectReward",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "fundStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getClaimableReward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableRewards",
    values: [string[], string]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(functionFragment: "link", values?: undefined): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakingStore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewards",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "BPS_DIVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "CONTRACT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "DS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ORACLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "UNIT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assetStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fundStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "link", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingStore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateRewards",
    data: BytesLike
  ): Result;

  events: {
    "CAPStaked(address,uint256)": EventFragment;
    "CAPUnstaked(address,uint256)": EventFragment;
    "CollectedReward(address,address,uint256)": EventFragment;
    "SetGov(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CAPStaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CAPUnstaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectedReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGov"): EventFragment;
}

export class Staking extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: StakingInterface;

  functions: {
    BPS_DIVIDER(overrides?: CallOverrides): Promise<[BigNumber]>;

    "BPS_DIVIDER()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<[string]>;

    DS(overrides?: CallOverrides): Promise<[string]>;

    "DS()"(overrides?: CallOverrides): Promise<[string]>;

    ORACLE(overrides?: CallOverrides): Promise<[string]>;

    "ORACLE()"(overrides?: CallOverrides): Promise<[string]>;

    UNIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "UNIT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    assetStore(overrides?: CallOverrides): Promise<[string]>;

    "assetStore()"(overrides?: CallOverrides): Promise<[string]>;

    cap(overrides?: CallOverrides): Promise<[string]>;

    "cap()"(overrides?: CallOverrides): Promise<[string]>;

    collectMultiple(
      assets: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "collectMultiple(address[])"(
      assets: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    collectReward(
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "collectReward(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    fundStore(overrides?: CallOverrides): Promise<[string]>;

    "fundStore()"(overrides?: CallOverrides): Promise<[string]>;

    getClaimableReward(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getClaimableReward(address,address)"(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getClaimableRewards(
      assets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _rewards: BigNumber[] }>;

    "getClaimableRewards(address[],address)"(
      assets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _rewards: BigNumber[] }>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    "gov()"(overrides?: CallOverrides): Promise<[string]>;

    link(overrides?: Overrides): Promise<ContractTransaction>;

    "link()"(overrides?: Overrides): Promise<ContractTransaction>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;

    "roleStore()"(overrides?: CallOverrides): Promise<[string]>;

    setGov(_gov: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setGov(address)"(
      _gov: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakingStore(overrides?: CallOverrides): Promise<[string]>;

    "stakingStore()"(overrides?: CallOverrides): Promise<[string]>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unstake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateRewards(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateRewards(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  BPS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

  "BPS_DIVIDER()"(overrides?: CallOverrides): Promise<BigNumber>;

  CONTRACT(overrides?: CallOverrides): Promise<string>;

  "CONTRACT()"(overrides?: CallOverrides): Promise<string>;

  DS(overrides?: CallOverrides): Promise<string>;

  "DS()"(overrides?: CallOverrides): Promise<string>;

  ORACLE(overrides?: CallOverrides): Promise<string>;

  "ORACLE()"(overrides?: CallOverrides): Promise<string>;

  UNIT(overrides?: CallOverrides): Promise<BigNumber>;

  "UNIT()"(overrides?: CallOverrides): Promise<BigNumber>;

  assetStore(overrides?: CallOverrides): Promise<string>;

  "assetStore()"(overrides?: CallOverrides): Promise<string>;

  cap(overrides?: CallOverrides): Promise<string>;

  "cap()"(overrides?: CallOverrides): Promise<string>;

  collectMultiple(
    assets: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "collectMultiple(address[])"(
    assets: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  collectReward(
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "collectReward(address)"(
    asset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  fundStore(overrides?: CallOverrides): Promise<string>;

  "fundStore()"(overrides?: CallOverrides): Promise<string>;

  getClaimableReward(
    asset: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getClaimableReward(address,address)"(
    asset: string,
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getClaimableRewards(
    assets: string[],
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getClaimableRewards(address[],address)"(
    assets: string[],
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  gov(overrides?: CallOverrides): Promise<string>;

  "gov()"(overrides?: CallOverrides): Promise<string>;

  link(overrides?: Overrides): Promise<ContractTransaction>;

  "link()"(overrides?: Overrides): Promise<ContractTransaction>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  "roleStore()"(overrides?: CallOverrides): Promise<string>;

  setGov(_gov: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setGov(address)"(
    _gov: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stake(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakingStore(overrides?: CallOverrides): Promise<string>;

  "stakingStore()"(overrides?: CallOverrides): Promise<string>;

  unstake(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unstake(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateRewards(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateRewards(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    BPS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    "BPS_DIVIDER()"(overrides?: CallOverrides): Promise<BigNumber>;

    CONTRACT(overrides?: CallOverrides): Promise<string>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<string>;

    DS(overrides?: CallOverrides): Promise<string>;

    "DS()"(overrides?: CallOverrides): Promise<string>;

    ORACLE(overrides?: CallOverrides): Promise<string>;

    "ORACLE()"(overrides?: CallOverrides): Promise<string>;

    UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    "UNIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetStore(overrides?: CallOverrides): Promise<string>;

    "assetStore()"(overrides?: CallOverrides): Promise<string>;

    cap(overrides?: CallOverrides): Promise<string>;

    "cap()"(overrides?: CallOverrides): Promise<string>;

    collectMultiple(assets: string[], overrides?: CallOverrides): Promise<void>;

    "collectMultiple(address[])"(
      assets: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    collectReward(asset: string, overrides?: CallOverrides): Promise<void>;

    "collectReward(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    fundStore(overrides?: CallOverrides): Promise<string>;

    "fundStore()"(overrides?: CallOverrides): Promise<string>;

    getClaimableReward(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getClaimableReward(address,address)"(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableRewards(
      assets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getClaimableRewards(address[],address)"(
      assets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    gov(overrides?: CallOverrides): Promise<string>;

    "gov()"(overrides?: CallOverrides): Promise<string>;

    link(overrides?: CallOverrides): Promise<void>;

    "link()"(overrides?: CallOverrides): Promise<void>;

    roleStore(overrides?: CallOverrides): Promise<string>;

    "roleStore()"(overrides?: CallOverrides): Promise<string>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    "setGov(address)"(_gov: string, overrides?: CallOverrides): Promise<void>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingStore(overrides?: CallOverrides): Promise<string>;

    "stakingStore()"(overrides?: CallOverrides): Promise<string>;

    unstake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "unstake(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewards(account: string, overrides?: CallOverrides): Promise<void>;

    "updateRewards(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    CAPStaked(user: string | null, amount: null): EventFilter;

    CAPUnstaked(user: string | null, amount: null): EventFilter;

    CollectedReward(
      user: string | null,
      asset: string | null,
      amount: null
    ): EventFilter;

    SetGov(prevGov: null, nextGov: null): EventFilter;
  };

  estimateGas: {
    BPS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    "BPS_DIVIDER()"(overrides?: CallOverrides): Promise<BigNumber>;

    CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<BigNumber>;

    DS(overrides?: CallOverrides): Promise<BigNumber>;

    "DS()"(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ORACLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    "UNIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetStore(overrides?: CallOverrides): Promise<BigNumber>;

    "assetStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    cap(overrides?: CallOverrides): Promise<BigNumber>;

    "cap()"(overrides?: CallOverrides): Promise<BigNumber>;

    collectMultiple(
      assets: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "collectMultiple(address[])"(
      assets: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    collectReward(asset: string, overrides?: Overrides): Promise<BigNumber>;

    "collectReward(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    fundStore(overrides?: CallOverrides): Promise<BigNumber>;

    "fundStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimableReward(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getClaimableReward(address,address)"(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimableRewards(
      assets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getClaimableRewards(address[],address)"(
      assets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    "gov()"(overrides?: CallOverrides): Promise<BigNumber>;

    link(overrides?: Overrides): Promise<BigNumber>;

    "link()"(overrides?: Overrides): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;

    "roleStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    setGov(_gov: string, overrides?: Overrides): Promise<BigNumber>;

    "setGov(address)"(_gov: string, overrides?: Overrides): Promise<BigNumber>;

    stake(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakingStore(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    unstake(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "unstake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateRewards(account: string, overrides?: Overrides): Promise<BigNumber>;

    "updateRewards(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BPS_DIVIDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BPS_DIVIDER()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DS()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ORACLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "UNIT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assetStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cap()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectMultiple(
      assets: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "collectMultiple(address[])"(
      assets: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    collectReward(
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "collectReward(address)"(
      asset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    fundStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fundStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaimableReward(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getClaimableReward(address,address)"(
      asset: string,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimableRewards(
      assets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getClaimableRewards(address[],address)"(
      assets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gov()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    link(overrides?: Overrides): Promise<PopulatedTransaction>;

    "link()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "roleStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGov(_gov: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "setGov(address)"(
      _gov: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakingStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unstake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateRewards(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateRewards(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
