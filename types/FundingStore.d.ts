/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FundingStoreInterface extends ethers.utils.Interface {
  functions: {
    "CONTRACT()": FunctionFragment;
    "ORACLE()": FunctionFragment;
    "defaultFundingFactor()": FunctionFragment;
    "fundingInterval()": FunctionFragment;
    "getFundingFactor(string)": FunctionFragment;
    "getFundingTracker(address,string)": FunctionFragment;
    "getFundingTrackers(address[],string[])": FunctionFragment;
    "getLastUpdated(address,string)": FunctionFragment;
    "gov()": FunctionFragment;
    "roleStore()": FunctionFragment;
    "setFundingFactor(string,uint256)": FunctionFragment;
    "setFundingInterval(uint256)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setLastUpdated(address,string,uint256)": FunctionFragment;
    "updateFundingTracker(address,string,int256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "CONTRACT", values?: undefined): string;
  encodeFunctionData(functionFragment: "ORACLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "defaultFundingFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingFactor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingTracker",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFundingTrackers",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastUpdated",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setFundingFactor",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFundingInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setLastUpdated",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFundingTracker",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "CONTRACT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ORACLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultFundingFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFundingTrackers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFundingFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFundingInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLastUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFundingTracker",
    data: BytesLike
  ): Result;

  events: {
    "SetGov(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetGov"): EventFragment;
}

export class FundingStore extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FundingStoreInterface;

  functions: {
    CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<[string]>;

    ORACLE(overrides?: CallOverrides): Promise<[string]>;

    "ORACLE()"(overrides?: CallOverrides): Promise<[string]>;

    defaultFundingFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "defaultFundingFactor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundingInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    "fundingInterval()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFundingFactor(
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getFundingFactor(string)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFundingTracker(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getFundingTracker(address,string)"(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFundingTrackers(
      assets: string[],
      markets: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { fts: BigNumber[] }>;

    "getFundingTrackers(address[],string[])"(
      assets: string[],
      markets: string[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { fts: BigNumber[] }>;

    getLastUpdated(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getLastUpdated(address,string)"(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    "gov()"(overrides?: CallOverrides): Promise<[string]>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;

    "roleStore()"(overrides?: CallOverrides): Promise<[string]>;

    setFundingFactor(
      market: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFundingFactor(string,uint256)"(
      market: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFundingInterval(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFundingInterval(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGov(_gov: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setGov(address)"(
      _gov: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLastUpdated(
      asset: string,
      market: string,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLastUpdated(address,string,uint256)"(
      asset: string,
      market: string,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateFundingTracker(
      asset: string,
      market: string,
      fundingIncrement: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateFundingTracker(address,string,int256)"(
      asset: string,
      market: string,
      fundingIncrement: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  CONTRACT(overrides?: CallOverrides): Promise<string>;

  "CONTRACT()"(overrides?: CallOverrides): Promise<string>;

  ORACLE(overrides?: CallOverrides): Promise<string>;

  "ORACLE()"(overrides?: CallOverrides): Promise<string>;

  defaultFundingFactor(overrides?: CallOverrides): Promise<BigNumber>;

  "defaultFundingFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

  fundingInterval(overrides?: CallOverrides): Promise<BigNumber>;

  "fundingInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

  getFundingFactor(
    market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getFundingFactor(string)"(
    market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFundingTracker(
    asset: string,
    market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getFundingTracker(address,string)"(
    asset: string,
    market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFundingTrackers(
    assets: string[],
    markets: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "getFundingTrackers(address[],string[])"(
    assets: string[],
    markets: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getLastUpdated(
    asset: string,
    market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getLastUpdated(address,string)"(
    asset: string,
    market: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  "gov()"(overrides?: CallOverrides): Promise<string>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  "roleStore()"(overrides?: CallOverrides): Promise<string>;

  setFundingFactor(
    market: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFundingFactor(string,uint256)"(
    market: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFundingInterval(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFundingInterval(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGov(_gov: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setGov(address)"(
    _gov: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLastUpdated(
    asset: string,
    market: string,
    timestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLastUpdated(address,string,uint256)"(
    asset: string,
    market: string,
    timestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateFundingTracker(
    asset: string,
    market: string,
    fundingIncrement: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateFundingTracker(address,string,int256)"(
    asset: string,
    market: string,
    fundingIncrement: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    CONTRACT(overrides?: CallOverrides): Promise<string>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<string>;

    ORACLE(overrides?: CallOverrides): Promise<string>;

    "ORACLE()"(overrides?: CallOverrides): Promise<string>;

    defaultFundingFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "defaultFundingFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    fundingInterval(overrides?: CallOverrides): Promise<BigNumber>;

    "fundingInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFundingFactor(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFundingFactor(string)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingTracker(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFundingTracker(address,string)"(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingTrackers(
      assets: string[],
      markets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "getFundingTrackers(address[],string[])"(
      assets: string[],
      markets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getLastUpdated(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastUpdated(address,string)"(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    "gov()"(overrides?: CallOverrides): Promise<string>;

    roleStore(overrides?: CallOverrides): Promise<string>;

    "roleStore()"(overrides?: CallOverrides): Promise<string>;

    setFundingFactor(
      market: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFundingFactor(string,uint256)"(
      market: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFundingInterval(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFundingInterval(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    "setGov(address)"(_gov: string, overrides?: CallOverrides): Promise<void>;

    setLastUpdated(
      asset: string,
      market: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLastUpdated(address,string,uint256)"(
      asset: string,
      market: string,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFundingTracker(
      asset: string,
      market: string,
      fundingIncrement: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateFundingTracker(address,string,int256)"(
      asset: string,
      market: string,
      fundingIncrement: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    SetGov(prevGov: null, nextGov: null): EventFilter;
  };

  estimateGas: {
    CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ORACLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    defaultFundingFactor(overrides?: CallOverrides): Promise<BigNumber>;

    "defaultFundingFactor()"(overrides?: CallOverrides): Promise<BigNumber>;

    fundingInterval(overrides?: CallOverrides): Promise<BigNumber>;

    "fundingInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

    getFundingFactor(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFundingFactor(string)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingTracker(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFundingTracker(address,string)"(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFundingTrackers(
      assets: string[],
      markets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getFundingTrackers(address[],string[])"(
      assets: string[],
      markets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLastUpdated(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLastUpdated(address,string)"(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    "gov()"(overrides?: CallOverrides): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;

    "roleStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    setFundingFactor(
      market: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFundingFactor(string,uint256)"(
      market: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFundingInterval(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFundingInterval(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGov(_gov: string, overrides?: Overrides): Promise<BigNumber>;

    "setGov(address)"(_gov: string, overrides?: Overrides): Promise<BigNumber>;

    setLastUpdated(
      asset: string,
      market: string,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLastUpdated(address,string,uint256)"(
      asset: string,
      market: string,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateFundingTracker(
      asset: string,
      market: string,
      fundingIncrement: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateFundingTracker(address,string,int256)"(
      asset: string,
      market: string,
      fundingIncrement: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ORACLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defaultFundingFactor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "defaultFundingFactor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundingInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fundingInterval()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundingFactor(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFundingFactor(string)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundingTracker(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFundingTracker(address,string)"(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFundingTrackers(
      assets: string[],
      markets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getFundingTrackers(address[],string[])"(
      assets: string[],
      markets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastUpdated(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLastUpdated(address,string)"(
      asset: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gov()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "roleStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFundingFactor(
      market: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFundingFactor(string,uint256)"(
      market: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFundingInterval(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFundingInterval(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGov(_gov: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "setGov(address)"(
      _gov: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLastUpdated(
      asset: string,
      market: string,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLastUpdated(address,string,uint256)"(
      asset: string,
      market: string,
      timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateFundingTracker(
      asset: string,
      market: string,
      fundingIncrement: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateFundingTracker(address,string,int256)"(
      asset: string,
      market: string,
      fundingIncrement: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
