/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RoleStoreInterface extends ethers.utils.Interface {
  functions: {
    "getRoleCount()": FunctionFragment;
    "gov()": FunctionFragment;
    "grantRole(address,bytes32)": FunctionFragment;
    "hasRole(address,bytes32)": FunctionFragment;
    "revokeRole(address,bytes32)": FunctionFragment;
    "setGov(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getRoleCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "getRoleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;

  events: {
    "SetGov(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetGov"): EventFragment;
}

export class RoleStore extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RoleStoreInterface;

  functions: {
    getRoleCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getRoleCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    "gov()"(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      account: string,
      key: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(address,bytes32)"(
      account: string,
      key: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      account: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(address,bytes32)"(
      account: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revokeRole(
      account: string,
      key: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(address,bytes32)"(
      account: string,
      key: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGov(_gov: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setGov(address)"(
      _gov: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getRoleCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getRoleCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  "gov()"(overrides?: CallOverrides): Promise<string>;

  grantRole(
    account: string,
    key: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(address,bytes32)"(
    account: string,
    key: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    account: string,
    key: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(address,bytes32)"(
    account: string,
    key: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revokeRole(
    account: string,
    key: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(address,bytes32)"(
    account: string,
    key: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGov(_gov: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setGov(address)"(
    _gov: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getRoleCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getRoleCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    "gov()"(overrides?: CallOverrides): Promise<string>;

    grantRole(
      account: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(address,bytes32)"(
      account: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      account: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(address,bytes32)"(
      account: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeRole(
      account: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(address,bytes32)"(
      account: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    "setGov(address)"(_gov: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    SetGov(prevGov: null, nextGov: null): EventFilter;
  };

  estimateGas: {
    getRoleCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getRoleCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    "gov()"(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      account: string,
      key: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(address,bytes32)"(
      account: string,
      key: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      account: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(address,bytes32)"(
      account: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeRole(
      account: string,
      key: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(address,bytes32)"(
      account: string,
      key: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGov(_gov: string, overrides?: Overrides): Promise<BigNumber>;

    "setGov(address)"(_gov: string, overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getRoleCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getRoleCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gov()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      account: string,
      key: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(address,bytes32)"(
      account: string,
      key: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      account: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(address,bytes32)"(
      account: string,
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      account: string,
      key: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(address,bytes32)"(
      account: string,
      key: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGov(_gov: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "setGov(address)"(
      _gov: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
