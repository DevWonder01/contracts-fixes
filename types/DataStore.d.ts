/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DataStoreInterface extends ethers.utils.Interface {
  functions: {
    "BPS_DIVIDER()": FunctionFragment;
    "UNIT()": FunctionFragment;
    "addressValues(bytes32)": FunctionFragment;
    "boolValues(bytes32)": FunctionFragment;
    "dataValues(bytes32)": FunctionFragment;
    "getAddress(string)": FunctionFragment;
    "getBool(string)": FunctionFragment;
    "getData(string)": FunctionFragment;
    "getHash(string)": FunctionFragment;
    "getInt(string)": FunctionFragment;
    "getString(string)": FunctionFragment;
    "getUint(string)": FunctionFragment;
    "gov()": FunctionFragment;
    "intValues(bytes32)": FunctionFragment;
    "setAddress(string,address,bool)": FunctionFragment;
    "setBool(string,bool)": FunctionFragment;
    "setData(string,bytes32)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setInt(string,int256,bool)": FunctionFragment;
    "setString(string,string)": FunctionFragment;
    "setUint(string,uint256,bool)": FunctionFragment;
    "stringValues(bytes32)": FunctionFragment;
    "uintValues(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "BPS_DIVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "UNIT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addressValues",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "boolValues",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "dataValues",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getAddress", values: [string]): string;
  encodeFunctionData(functionFragment: "getBool", values: [string]): string;
  encodeFunctionData(functionFragment: "getData", values: [string]): string;
  encodeFunctionData(functionFragment: "getHash", values: [string]): string;
  encodeFunctionData(functionFragment: "getInt", values: [string]): string;
  encodeFunctionData(functionFragment: "getString", values: [string]): string;
  encodeFunctionData(functionFragment: "getUint", values: [string]): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "intValues",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBool",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setData",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setInt",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setString",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUint",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stringValues",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uintValues",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "BPS_DIVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "UNIT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addressValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "boolValues", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dataValues", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getInt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getString", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "intValues", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setInt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setString", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stringValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uintValues", data: BytesLike): Result;

  events: {
    "SetGov(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetGov"): EventFragment;
}

export class DataStore extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DataStoreInterface;

  functions: {
    BPS_DIVIDER(overrides?: CallOverrides): Promise<[BigNumber]>;

    "BPS_DIVIDER()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    UNIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "UNIT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addressValues(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "addressValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    boolValues(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    "boolValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    dataValues(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "dataValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAddress(key: string, overrides?: CallOverrides): Promise<[string]>;

    "getAddress(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBool(key: string, overrides?: CallOverrides): Promise<[boolean]>;

    "getBool(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getData(key: string, overrides?: CallOverrides): Promise<[string]>;

    "getData(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getHash(key: string, overrides?: CallOverrides): Promise<[string]>;

    "getHash(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getInt(key: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getInt(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getString(key: string, overrides?: CallOverrides): Promise<[string]>;

    "getString(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUint(key: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getUint(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    "gov()"(overrides?: CallOverrides): Promise<[string]>;

    intValues(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    "intValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setAddress(
      key: string,
      value: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAddress(string,address,bool)"(
      key: string,
      value: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBool(
      key: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBool(string,bool)"(
      key: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setData(
      key: string,
      value: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setData(string,bytes32)"(
      key: string,
      value: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGov(_gov: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setGov(address)"(
      _gov: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInt(
      key: string,
      value: BigNumberish,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setInt(string,int256,bool)"(
      key: string,
      value: BigNumberish,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setString(
      key: string,
      value: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setString(string,string)"(
      key: string,
      value: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setUint(
      key: string,
      value: BigNumberish,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setUint(string,uint256,bool)"(
      key: string,
      value: BigNumberish,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stringValues(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "stringValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    uintValues(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "uintValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  BPS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

  "BPS_DIVIDER()"(overrides?: CallOverrides): Promise<BigNumber>;

  UNIT(overrides?: CallOverrides): Promise<BigNumber>;

  "UNIT()"(overrides?: CallOverrides): Promise<BigNumber>;

  addressValues(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "addressValues(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  boolValues(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  "boolValues(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  dataValues(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "dataValues(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getAddress(key: string, overrides?: CallOverrides): Promise<string>;

  "getAddress(string)"(key: string, overrides?: CallOverrides): Promise<string>;

  getBool(key: string, overrides?: CallOverrides): Promise<boolean>;

  "getBool(string)"(key: string, overrides?: CallOverrides): Promise<boolean>;

  getData(key: string, overrides?: CallOverrides): Promise<string>;

  "getData(string)"(key: string, overrides?: CallOverrides): Promise<string>;

  getHash(key: string, overrides?: CallOverrides): Promise<string>;

  "getHash(string)"(key: string, overrides?: CallOverrides): Promise<string>;

  getInt(key: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getInt(string)"(key: string, overrides?: CallOverrides): Promise<BigNumber>;

  getString(key: string, overrides?: CallOverrides): Promise<string>;

  "getString(string)"(key: string, overrides?: CallOverrides): Promise<string>;

  getUint(key: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getUint(string)"(key: string, overrides?: CallOverrides): Promise<BigNumber>;

  gov(overrides?: CallOverrides): Promise<string>;

  "gov()"(overrides?: CallOverrides): Promise<string>;

  intValues(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "intValues(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setAddress(
    key: string,
    value: string,
    overwrite: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAddress(string,address,bool)"(
    key: string,
    value: string,
    overwrite: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBool(
    key: string,
    value: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBool(string,bool)"(
    key: string,
    value: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setData(
    key: string,
    value: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setData(string,bytes32)"(
    key: string,
    value: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGov(_gov: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setGov(address)"(
    _gov: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInt(
    key: string,
    value: BigNumberish,
    overwrite: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setInt(string,int256,bool)"(
    key: string,
    value: BigNumberish,
    overwrite: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setString(
    key: string,
    value: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setString(string,string)"(
    key: string,
    value: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setUint(
    key: string,
    value: BigNumberish,
    overwrite: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setUint(string,uint256,bool)"(
    key: string,
    value: BigNumberish,
    overwrite: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stringValues(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "stringValues(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  uintValues(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  "uintValues(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    BPS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    "BPS_DIVIDER()"(overrides?: CallOverrides): Promise<BigNumber>;

    UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    "UNIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    addressValues(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "addressValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    boolValues(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    "boolValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dataValues(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "dataValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getAddress(key: string, overrides?: CallOverrides): Promise<string>;

    "getAddress(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getBool(key: string, overrides?: CallOverrides): Promise<boolean>;

    "getBool(string)"(key: string, overrides?: CallOverrides): Promise<boolean>;

    getData(key: string, overrides?: CallOverrides): Promise<string>;

    "getData(string)"(key: string, overrides?: CallOverrides): Promise<string>;

    getHash(key: string, overrides?: CallOverrides): Promise<string>;

    "getHash(string)"(key: string, overrides?: CallOverrides): Promise<string>;

    getInt(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getInt(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getString(key: string, overrides?: CallOverrides): Promise<string>;

    "getString(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getUint(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getUint(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<string>;

    "gov()"(overrides?: CallOverrides): Promise<string>;

    intValues(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "intValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAddress(
      key: string,
      value: string,
      overwrite: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setAddress(string,address,bool)"(
      key: string,
      value: string,
      overwrite: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setBool(
      key: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setBool(string,bool)"(
      key: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setData(
      key: string,
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setData(string,bytes32)"(
      key: string,
      value: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    "setGov(address)"(_gov: string, overrides?: CallOverrides): Promise<void>;

    setInt(
      key: string,
      value: BigNumberish,
      overwrite: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setInt(string,int256,bool)"(
      key: string,
      value: BigNumberish,
      overwrite: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setString(
      key: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setString(string,string)"(
      key: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setUint(
      key: string,
      value: BigNumberish,
      overwrite: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setUint(string,uint256,bool)"(
      key: string,
      value: BigNumberish,
      overwrite: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stringValues(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "stringValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    uintValues(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "uintValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    SetGov(prevGov: null, nextGov: null): EventFilter;
  };

  estimateGas: {
    BPS_DIVIDER(overrides?: CallOverrides): Promise<BigNumber>;

    "BPS_DIVIDER()"(overrides?: CallOverrides): Promise<BigNumber>;

    UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    "UNIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    addressValues(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addressValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boolValues(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "boolValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dataValues(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "dataValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAddress(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getAddress(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBool(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getBool(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getData(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getData(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getHash(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getHash(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInt(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getInt(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getString(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getString(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUint(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getUint(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    "gov()"(overrides?: CallOverrides): Promise<BigNumber>;

    intValues(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "intValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAddress(
      key: string,
      value: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAddress(string,address,bool)"(
      key: string,
      value: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBool(
      key: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBool(string,bool)"(
      key: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setData(
      key: string,
      value: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setData(string,bytes32)"(
      key: string,
      value: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGov(_gov: string, overrides?: Overrides): Promise<BigNumber>;

    "setGov(address)"(_gov: string, overrides?: Overrides): Promise<BigNumber>;

    setInt(
      key: string,
      value: BigNumberish,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setInt(string,int256,bool)"(
      key: string,
      value: BigNumberish,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setString(
      key: string,
      value: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setString(string,string)"(
      key: string,
      value: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setUint(
      key: string,
      value: BigNumberish,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setUint(string,uint256,bool)"(
      key: string,
      value: BigNumberish,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stringValues(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stringValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uintValues(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "uintValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BPS_DIVIDER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "BPS_DIVIDER()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UNIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "UNIT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addressValues(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addressValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boolValues(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "boolValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dataValues(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dataValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddress(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAddress(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBool(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBool(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getData(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getData(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHash(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getHash(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInt(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInt(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getString(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getString(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUint(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUint(string)"(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gov()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    intValues(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "intValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAddress(
      key: string,
      value: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAddress(string,address,bool)"(
      key: string,
      value: string,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBool(
      key: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBool(string,bool)"(
      key: string,
      value: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setData(
      key: string,
      value: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setData(string,bytes32)"(
      key: string,
      value: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGov(_gov: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "setGov(address)"(
      _gov: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInt(
      key: string,
      value: BigNumberish,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setInt(string,int256,bool)"(
      key: string,
      value: BigNumberish,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setString(
      key: string,
      value: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setString(string,string)"(
      key: string,
      value: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setUint(
      key: string,
      value: BigNumberish,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setUint(string,uint256,bool)"(
      key: string,
      value: BigNumberish,
      overwrite: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stringValues(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stringValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uintValues(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "uintValues(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
