/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AssetStoreInterface extends ethers.utils.Interface {
  functions: {
    "CONTRACT()": FunctionFragment;
    "ORACLE()": FunctionFragment;
    "assetList(uint256)": FunctionFragment;
    "get(address)": FunctionFragment;
    "getAssetByIndex(uint256)": FunctionFragment;
    "getAssetCount()": FunctionFragment;
    "getAssetList()": FunctionFragment;
    "gov()": FunctionFragment;
    "isSupported(address)": FunctionFragment;
    "roleStore()": FunctionFragment;
    "set(address,tuple)": FunctionFragment;
    "setGov(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "CONTRACT", values?: undefined): string;
  encodeFunctionData(functionFragment: "ORACLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "get", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAssetByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetList",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(functionFragment: "isSupported", values: [string]): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [string, { minSize: BigNumberish; chainlinkFeed: string }]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;

  decodeFunctionResult(functionFragment: "CONTRACT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ORACLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assetList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssetByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;

  events: {
    "SetGov(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetGov"): EventFragment;
}

export class AssetStore extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AssetStoreInterface;

  functions: {
    CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<[string]>;

    ORACLE(overrides?: CallOverrides): Promise<[string]>;

    "ORACLE()"(overrides?: CallOverrides): Promise<[string]>;

    assetList(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "assetList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    get(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, string] & { minSize: BigNumber; chainlinkFeed: string }]
    >;

    "get(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber, string] & { minSize: BigNumber; chainlinkFeed: string }]
    >;

    getAssetByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getAssetByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAssetCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getAssetCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAssetList(overrides?: CallOverrides): Promise<[string[]]>;

    "getAssetList()"(overrides?: CallOverrides): Promise<[string[]]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    "gov()"(overrides?: CallOverrides): Promise<[string]>;

    isSupported(asset: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isSupported(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;

    "roleStore()"(overrides?: CallOverrides): Promise<[string]>;

    set(
      asset: string,
      assetInfo: { minSize: BigNumberish; chainlinkFeed: string },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "set(address,(uint256,address))"(
      asset: string,
      assetInfo: { minSize: BigNumberish; chainlinkFeed: string },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGov(_gov: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setGov(address)"(
      _gov: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  CONTRACT(overrides?: CallOverrides): Promise<string>;

  "CONTRACT()"(overrides?: CallOverrides): Promise<string>;

  ORACLE(overrides?: CallOverrides): Promise<string>;

  "ORACLE()"(overrides?: CallOverrides): Promise<string>;

  assetList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "assetList(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  get(
    asset: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & { minSize: BigNumber; chainlinkFeed: string }
  >;

  "get(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string] & { minSize: BigNumber; chainlinkFeed: string }
  >;

  getAssetByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getAssetByIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getAssetCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getAssetList(overrides?: CallOverrides): Promise<string[]>;

  "getAssetList()"(overrides?: CallOverrides): Promise<string[]>;

  gov(overrides?: CallOverrides): Promise<string>;

  "gov()"(overrides?: CallOverrides): Promise<string>;

  isSupported(asset: string, overrides?: CallOverrides): Promise<boolean>;

  "isSupported(address)"(
    asset: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  "roleStore()"(overrides?: CallOverrides): Promise<string>;

  set(
    asset: string,
    assetInfo: { minSize: BigNumberish; chainlinkFeed: string },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "set(address,(uint256,address))"(
    asset: string,
    assetInfo: { minSize: BigNumberish; chainlinkFeed: string },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGov(_gov: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setGov(address)"(
    _gov: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    CONTRACT(overrides?: CallOverrides): Promise<string>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<string>;

    ORACLE(overrides?: CallOverrides): Promise<string>;

    "ORACLE()"(overrides?: CallOverrides): Promise<string>;

    assetList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "assetList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    get(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { minSize: BigNumber; chainlinkFeed: string }
    >;

    "get(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { minSize: BigNumber; chainlinkFeed: string }
    >;

    getAssetByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAssetByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getAssetCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetList(overrides?: CallOverrides): Promise<string[]>;

    "getAssetList()"(overrides?: CallOverrides): Promise<string[]>;

    gov(overrides?: CallOverrides): Promise<string>;

    "gov()"(overrides?: CallOverrides): Promise<string>;

    isSupported(asset: string, overrides?: CallOverrides): Promise<boolean>;

    "isSupported(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    roleStore(overrides?: CallOverrides): Promise<string>;

    "roleStore()"(overrides?: CallOverrides): Promise<string>;

    set(
      asset: string,
      assetInfo: { minSize: BigNumberish; chainlinkFeed: string },
      overrides?: CallOverrides
    ): Promise<void>;

    "set(address,(uint256,address))"(
      asset: string,
      assetInfo: { minSize: BigNumberish; chainlinkFeed: string },
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    "setGov(address)"(_gov: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    SetGov(prevGov: null, nextGov: null): EventFilter;
  };

  estimateGas: {
    CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ORACLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assetList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    get(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    "get(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAssetByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getAssetCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetList(overrides?: CallOverrides): Promise<BigNumber>;

    "getAssetList()"(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    "gov()"(overrides?: CallOverrides): Promise<BigNumber>;

    isSupported(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isSupported(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;

    "roleStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      asset: string,
      assetInfo: { minSize: BigNumberish; chainlinkFeed: string },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "set(address,(uint256,address))"(
      asset: string,
      assetInfo: { minSize: BigNumberish; chainlinkFeed: string },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGov(_gov: string, overrides?: Overrides): Promise<BigNumber>;

    "setGov(address)"(_gov: string, overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ORACLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assetList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    get(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "get(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAssetByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAssetCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAssetList()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gov()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSupported(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isSupported(address)"(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "roleStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    set(
      asset: string,
      assetInfo: { minSize: BigNumberish; chainlinkFeed: string },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "set(address,(uint256,address))"(
      asset: string,
      assetInfo: { minSize: BigNumberish; chainlinkFeed: string },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGov(_gov: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "setGov(address)"(
      _gov: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
