/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MarketStoreInterface extends ethers.utils.Interface {
  functions: {
    "CONTRACT()": FunctionFragment;
    "MAX_FEE()": FunctionFragment;
    "ORACLE()": FunctionFragment;
    "get(string)": FunctionFragment;
    "getMany(string[])": FunctionFragment;
    "getMarketByIndex(uint256)": FunctionFragment;
    "getMarketCount()": FunctionFragment;
    "getMarketList()": FunctionFragment;
    "gov()": FunctionFragment;
    "isGlobalReduceOnly()": FunctionFragment;
    "marketList(uint256)": FunctionFragment;
    "roleStore()": FunctionFragment;
    "set(string,tuple)": FunctionFragment;
    "setGov(address)": FunctionFragment;
    "setIsGlobalReduceOnly(bool)": FunctionFragment;
    "setMarketStatus(string[],bool[])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "CONTRACT", values?: undefined): string;
  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ORACLE", values?: undefined): string;
  encodeFunctionData(functionFragment: "get", values: [string]): string;
  encodeFunctionData(functionFragment: "getMany", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "getMarketByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketList",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isGlobalReduceOnly",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [
      string,
      {
        name: string;
        category: string;
        chainlinkFeed: string;
        maxLeverage: BigNumberish;
        maxDeviation: BigNumberish;
        fee: BigNumberish;
        liqThreshold: BigNumberish;
        allowChainlinkExecution: boolean;
        isClosed: boolean;
        isReduceOnly: boolean;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "setGov", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setIsGlobalReduceOnly",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketStatus",
    values: [string[], boolean[]]
  ): string;

  decodeFunctionResult(functionFragment: "CONTRACT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ORACLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMany", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isGlobalReduceOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marketList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIsGlobalReduceOnly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketStatus",
    data: BytesLike
  ): Result;

  events: {
    "SetGov(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetGov"): EventFragment;
}

export class MarketStore extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MarketStoreInterface;

  functions: {
    CONTRACT(overrides?: CallOverrides): Promise<[string]>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<[string]>;

    MAX_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_FEE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ORACLE(overrides?: CallOverrides): Promise<[string]>;

    "ORACLE()"(overrides?: CallOverrides): Promise<[string]>;

    get(
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean
        ] & {
          name: string;
          category: string;
          chainlinkFeed: string;
          maxLeverage: BigNumber;
          maxDeviation: BigNumber;
          fee: BigNumber;
          liqThreshold: BigNumber;
          allowChainlinkExecution: boolean;
          isClosed: boolean;
          isReduceOnly: boolean;
        }
      ]
    >;

    "get(string)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean
        ] & {
          name: string;
          category: string;
          chainlinkFeed: string;
          maxLeverage: BigNumber;
          maxDeviation: BigNumber;
          fee: BigNumber;
          liqThreshold: BigNumber;
          allowChainlinkExecution: boolean;
          isClosed: boolean;
          isReduceOnly: boolean;
        }
      ]
    >;

    getMany(
      _markets: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean
        ] & {
          name: string;
          category: string;
          chainlinkFeed: string;
          maxLeverage: BigNumber;
          maxDeviation: BigNumber;
          fee: BigNumber;
          liqThreshold: BigNumber;
          allowChainlinkExecution: boolean;
          isClosed: boolean;
          isReduceOnly: boolean;
        })[]
      ] & {
        _marketInfos: ([
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean
        ] & {
          name: string;
          category: string;
          chainlinkFeed: string;
          maxLeverage: BigNumber;
          maxDeviation: BigNumber;
          fee: BigNumber;
          liqThreshold: BigNumber;
          allowChainlinkExecution: boolean;
          isClosed: boolean;
          isReduceOnly: boolean;
        })[];
      }
    >;

    "getMany(string[])"(
      _markets: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean
        ] & {
          name: string;
          category: string;
          chainlinkFeed: string;
          maxLeverage: BigNumber;
          maxDeviation: BigNumber;
          fee: BigNumber;
          liqThreshold: BigNumber;
          allowChainlinkExecution: boolean;
          isClosed: boolean;
          isReduceOnly: boolean;
        })[]
      ] & {
        _marketInfos: ([
          string,
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean
        ] & {
          name: string;
          category: string;
          chainlinkFeed: string;
          maxLeverage: BigNumber;
          maxDeviation: BigNumber;
          fee: BigNumber;
          liqThreshold: BigNumber;
          allowChainlinkExecution: boolean;
          isClosed: boolean;
          isReduceOnly: boolean;
        })[];
      }
    >;

    getMarketByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getMarketByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMarketCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getMarketCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMarketList(overrides?: CallOverrides): Promise<[string[]]>;

    "getMarketList()"(overrides?: CallOverrides): Promise<[string[]]>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    "gov()"(overrides?: CallOverrides): Promise<[string]>;

    isGlobalReduceOnly(overrides?: CallOverrides): Promise<[boolean]>;

    "isGlobalReduceOnly()"(overrides?: CallOverrides): Promise<[boolean]>;

    marketList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "marketList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;

    "roleStore()"(overrides?: CallOverrides): Promise<[string]>;

    set(
      market: string,
      marketInfo: {
        name: string;
        category: string;
        chainlinkFeed: string;
        maxLeverage: BigNumberish;
        maxDeviation: BigNumberish;
        fee: BigNumberish;
        liqThreshold: BigNumberish;
        allowChainlinkExecution: boolean;
        isClosed: boolean;
        isReduceOnly: boolean;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "set(string,(string,string,address,uint256,uint256,uint256,uint256,bool,bool,bool))"(
      market: string,
      marketInfo: {
        name: string;
        category: string;
        chainlinkFeed: string;
        maxLeverage: BigNumberish;
        maxDeviation: BigNumberish;
        fee: BigNumberish;
        liqThreshold: BigNumberish;
        allowChainlinkExecution: boolean;
        isClosed: boolean;
        isReduceOnly: boolean;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGov(_gov: string, overrides?: Overrides): Promise<ContractTransaction>;

    "setGov(address)"(
      _gov: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setIsGlobalReduceOnly(
      b: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setIsGlobalReduceOnly(bool)"(
      b: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMarketStatus(
      _markets: string[],
      isClosed: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMarketStatus(string[],bool[])"(
      _markets: string[],
      isClosed: boolean[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  CONTRACT(overrides?: CallOverrides): Promise<string>;

  "CONTRACT()"(overrides?: CallOverrides): Promise<string>;

  MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

  ORACLE(overrides?: CallOverrides): Promise<string>;

  "ORACLE()"(overrides?: CallOverrides): Promise<string>;

  get(
    market: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean
    ] & {
      name: string;
      category: string;
      chainlinkFeed: string;
      maxLeverage: BigNumber;
      maxDeviation: BigNumber;
      fee: BigNumber;
      liqThreshold: BigNumber;
      allowChainlinkExecution: boolean;
      isClosed: boolean;
      isReduceOnly: boolean;
    }
  >;

  "get(string)"(
    market: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean
    ] & {
      name: string;
      category: string;
      chainlinkFeed: string;
      maxLeverage: BigNumber;
      maxDeviation: BigNumber;
      fee: BigNumber;
      liqThreshold: BigNumber;
      allowChainlinkExecution: boolean;
      isClosed: boolean;
      isReduceOnly: boolean;
    }
  >;

  getMany(
    _markets: string[],
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean
    ] & {
      name: string;
      category: string;
      chainlinkFeed: string;
      maxLeverage: BigNumber;
      maxDeviation: BigNumber;
      fee: BigNumber;
      liqThreshold: BigNumber;
      allowChainlinkExecution: boolean;
      isClosed: boolean;
      isReduceOnly: boolean;
    })[]
  >;

  "getMany(string[])"(
    _markets: string[],
    overrides?: CallOverrides
  ): Promise<
    ([
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean
    ] & {
      name: string;
      category: string;
      chainlinkFeed: string;
      maxLeverage: BigNumber;
      maxDeviation: BigNumber;
      fee: BigNumber;
      liqThreshold: BigNumber;
      allowChainlinkExecution: boolean;
      isClosed: boolean;
      isReduceOnly: boolean;
    })[]
  >;

  getMarketByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getMarketByIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getMarketCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMarketList(overrides?: CallOverrides): Promise<string[]>;

  "getMarketList()"(overrides?: CallOverrides): Promise<string[]>;

  gov(overrides?: CallOverrides): Promise<string>;

  "gov()"(overrides?: CallOverrides): Promise<string>;

  isGlobalReduceOnly(overrides?: CallOverrides): Promise<boolean>;

  "isGlobalReduceOnly()"(overrides?: CallOverrides): Promise<boolean>;

  marketList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "marketList(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  "roleStore()"(overrides?: CallOverrides): Promise<string>;

  set(
    market: string,
    marketInfo: {
      name: string;
      category: string;
      chainlinkFeed: string;
      maxLeverage: BigNumberish;
      maxDeviation: BigNumberish;
      fee: BigNumberish;
      liqThreshold: BigNumberish;
      allowChainlinkExecution: boolean;
      isClosed: boolean;
      isReduceOnly: boolean;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "set(string,(string,string,address,uint256,uint256,uint256,uint256,bool,bool,bool))"(
    market: string,
    marketInfo: {
      name: string;
      category: string;
      chainlinkFeed: string;
      maxLeverage: BigNumberish;
      maxDeviation: BigNumberish;
      fee: BigNumberish;
      liqThreshold: BigNumberish;
      allowChainlinkExecution: boolean;
      isClosed: boolean;
      isReduceOnly: boolean;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGov(_gov: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setGov(address)"(
    _gov: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setIsGlobalReduceOnly(
    b: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setIsGlobalReduceOnly(bool)"(
    b: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMarketStatus(
    _markets: string[],
    isClosed: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMarketStatus(string[],bool[])"(
    _markets: string[],
    isClosed: boolean[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    CONTRACT(overrides?: CallOverrides): Promise<string>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<string>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE(overrides?: CallOverrides): Promise<string>;

    "ORACLE()"(overrides?: CallOverrides): Promise<string>;

    get(
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean
      ] & {
        name: string;
        category: string;
        chainlinkFeed: string;
        maxLeverage: BigNumber;
        maxDeviation: BigNumber;
        fee: BigNumber;
        liqThreshold: BigNumber;
        allowChainlinkExecution: boolean;
        isClosed: boolean;
        isReduceOnly: boolean;
      }
    >;

    "get(string)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean
      ] & {
        name: string;
        category: string;
        chainlinkFeed: string;
        maxLeverage: BigNumber;
        maxDeviation: BigNumber;
        fee: BigNumber;
        liqThreshold: BigNumber;
        allowChainlinkExecution: boolean;
        isClosed: boolean;
        isReduceOnly: boolean;
      }
    >;

    getMany(
      _markets: string[],
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean
      ] & {
        name: string;
        category: string;
        chainlinkFeed: string;
        maxLeverage: BigNumber;
        maxDeviation: BigNumber;
        fee: BigNumber;
        liqThreshold: BigNumber;
        allowChainlinkExecution: boolean;
        isClosed: boolean;
        isReduceOnly: boolean;
      })[]
    >;

    "getMany(string[])"(
      _markets: string[],
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean
      ] & {
        name: string;
        category: string;
        chainlinkFeed: string;
        maxLeverage: BigNumber;
        maxDeviation: BigNumber;
        fee: BigNumber;
        liqThreshold: BigNumber;
        allowChainlinkExecution: boolean;
        isClosed: boolean;
        isReduceOnly: boolean;
      })[]
    >;

    getMarketByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getMarketByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getMarketCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketList(overrides?: CallOverrides): Promise<string[]>;

    "getMarketList()"(overrides?: CallOverrides): Promise<string[]>;

    gov(overrides?: CallOverrides): Promise<string>;

    "gov()"(overrides?: CallOverrides): Promise<string>;

    isGlobalReduceOnly(overrides?: CallOverrides): Promise<boolean>;

    "isGlobalReduceOnly()"(overrides?: CallOverrides): Promise<boolean>;

    marketList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "marketList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    roleStore(overrides?: CallOverrides): Promise<string>;

    "roleStore()"(overrides?: CallOverrides): Promise<string>;

    set(
      market: string,
      marketInfo: {
        name: string;
        category: string;
        chainlinkFeed: string;
        maxLeverage: BigNumberish;
        maxDeviation: BigNumberish;
        fee: BigNumberish;
        liqThreshold: BigNumberish;
        allowChainlinkExecution: boolean;
        isClosed: boolean;
        isReduceOnly: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "set(string,(string,string,address,uint256,uint256,uint256,uint256,bool,bool,bool))"(
      market: string,
      marketInfo: {
        name: string;
        category: string;
        chainlinkFeed: string;
        maxLeverage: BigNumberish;
        maxDeviation: BigNumberish;
        fee: BigNumberish;
        liqThreshold: BigNumberish;
        allowChainlinkExecution: boolean;
        isClosed: boolean;
        isReduceOnly: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setGov(_gov: string, overrides?: CallOverrides): Promise<void>;

    "setGov(address)"(_gov: string, overrides?: CallOverrides): Promise<void>;

    setIsGlobalReduceOnly(b: boolean, overrides?: CallOverrides): Promise<void>;

    "setIsGlobalReduceOnly(bool)"(
      b: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketStatus(
      _markets: string[],
      isClosed: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setMarketStatus(string[],bool[])"(
      _markets: string[],
      isClosed: boolean[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    SetGov(prevGov: null, nextGov: null): EventFilter;
  };

  estimateGas: {
    CONTRACT(overrides?: CallOverrides): Promise<BigNumber>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

    ORACLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ORACLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    get(market: string, overrides?: CallOverrides): Promise<BigNumber>;

    "get(string)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMany(_markets: string[], overrides?: CallOverrides): Promise<BigNumber>;

    "getMany(string[])"(
      _markets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getMarketCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketList(overrides?: CallOverrides): Promise<BigNumber>;

    "getMarketList()"(overrides?: CallOverrides): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    "gov()"(overrides?: CallOverrides): Promise<BigNumber>;

    isGlobalReduceOnly(overrides?: CallOverrides): Promise<BigNumber>;

    "isGlobalReduceOnly()"(overrides?: CallOverrides): Promise<BigNumber>;

    marketList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "marketList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;

    "roleStore()"(overrides?: CallOverrides): Promise<BigNumber>;

    set(
      market: string,
      marketInfo: {
        name: string;
        category: string;
        chainlinkFeed: string;
        maxLeverage: BigNumberish;
        maxDeviation: BigNumberish;
        fee: BigNumberish;
        liqThreshold: BigNumberish;
        allowChainlinkExecution: boolean;
        isClosed: boolean;
        isReduceOnly: boolean;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "set(string,(string,string,address,uint256,uint256,uint256,uint256,bool,bool,bool))"(
      market: string,
      marketInfo: {
        name: string;
        category: string;
        chainlinkFeed: string;
        maxLeverage: BigNumberish;
        maxDeviation: BigNumberish;
        fee: BigNumberish;
        liqThreshold: BigNumberish;
        allowChainlinkExecution: boolean;
        isClosed: boolean;
        isReduceOnly: boolean;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGov(_gov: string, overrides?: Overrides): Promise<BigNumber>;

    "setGov(address)"(_gov: string, overrides?: Overrides): Promise<BigNumber>;

    setIsGlobalReduceOnly(
      b: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setIsGlobalReduceOnly(bool)"(
      b: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMarketStatus(
      _markets: string[],
      isClosed: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMarketStatus(string[],bool[])"(
      _markets: string[],
      isClosed: boolean[],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTRACT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CONTRACT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_FEE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ORACLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ORACLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    get(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "get(string)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMany(
      _markets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMany(string[])"(
      _markets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMarketCount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getMarketList()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "gov()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isGlobalReduceOnly(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isGlobalReduceOnly()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "marketList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "roleStore()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    set(
      market: string,
      marketInfo: {
        name: string;
        category: string;
        chainlinkFeed: string;
        maxLeverage: BigNumberish;
        maxDeviation: BigNumberish;
        fee: BigNumberish;
        liqThreshold: BigNumberish;
        allowChainlinkExecution: boolean;
        isClosed: boolean;
        isReduceOnly: boolean;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "set(string,(string,string,address,uint256,uint256,uint256,uint256,bool,bool,bool))"(
      market: string,
      marketInfo: {
        name: string;
        category: string;
        chainlinkFeed: string;
        maxLeverage: BigNumberish;
        maxDeviation: BigNumberish;
        fee: BigNumberish;
        liqThreshold: BigNumberish;
        allowChainlinkExecution: boolean;
        isClosed: boolean;
        isReduceOnly: boolean;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGov(_gov: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "setGov(address)"(
      _gov: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setIsGlobalReduceOnly(
      b: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setIsGlobalReduceOnly(bool)"(
      b: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMarketStatus(
      _markets: string[],
      isClosed: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMarketStatus(string[],bool[])"(
      _markets: string[],
      isClosed: boolean[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
